[{"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\index.js":"1","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\store\\index.js":"2","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\index.js":"3","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\index.js":"4","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageUsersReducer.js":"5","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageRestaurantReducer.js":"6","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\generalReducer.js":"7","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\sygnet.js":"8","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\logo-negative.js":"9","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\logo.js":"10","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\App.js":"11","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\polyfill.js":"12","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\serviceWorker.js":"13","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\PrivateRoute.js":"14","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\PublicRoute.js":"15","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheContent.js":"16","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\login\\Login.js":"17","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ResetPasswordPage\\ResetPasswordPage.js":"18","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\register\\Register.js":"19","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\page404\\Page404.js":"20","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\page500\\Page500.js":"21","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheLayout.js":"22","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\routes.js":"23","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\generalActions.js":"24","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheFooter.js":"25","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageUsersPage\\ManageUsersPage.js":"26","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\users\\User.js":"27","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\users\\Users.js":"28","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\widgets\\Widgets.js":"29","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\theme\\typography\\Typography.js":"30","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheSidebar.js":"31","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeader.js":"32","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\theme\\colors\\Colors.js":"33","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\dashboard\\Dashboard.js":"34","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\Charts.js":"35","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\alerts\\Alerts.js":"36","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\modals\\Modals.js":"37","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\badges\\Badges.js":"38","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\toaster\\Toaster.js":"39","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\icons\\coreui-icons\\CoreUIIcons.js":"40","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\icons\\flags\\Flags.js":"41","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\ManageRestaurantPage.jsx":"42","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\icons\\brands\\Brands.js":"43","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\button-dropdowns\\ButtonDropdowns.js":"44","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\button-groups\\ButtonGroups.js":"45","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\buttons\\Buttons.js":"46","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\brand-buttons\\BrandButtons.js":"47","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\tabs\\Tabs.js":"48","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\switches\\Switches.js":"49","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\tooltips\\Tooltips.js":"50","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\progress-bar\\ProgressBar.js":"51","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\popovers\\Popovers.js":"52","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\navs\\Navs.js":"53","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\paginations\\Pagnations.js":"54","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\navbars\\Navbars.js":"55","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\forms\\BasicForms.js":"56","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\list-groups\\ListGroups.js":"57","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\carousels\\Carousels.js":"58","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\cards\\Cards.js":"59","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\collapses\\Collapses.js":"60","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\breadcrumbs\\Breadcrumbs.js":"61","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\jumbotrons\\Jumbotrons.js":"62","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\tables\\Tables.js":"63","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\axios.js":"64","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\widgets\\WidgetsBrand.js":"65","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\widgets\\WidgetsDropdown.js":"66","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\users\\UsersData.js":"67","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\ChartLineSimple.js":"68","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\ChartBarSimple.js":"69","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageUsersPage\\UpdateUserPasswordModalComp.js":"70","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\_nav.js":"71","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdownTasks.js":"72","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\UpdatePasswordModalComp.js":"73","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\AddRestaurantModalComp.js":"74","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\DeleteRestaurantModalComp.js":"75","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageRestaurantAction.js":"76","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\reusable\\index.js":"77","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageUsersAction.js":"78","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\MainChartExample.js":"79","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdownNotif.js":"80","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdownMssg.js":"81","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdown.js":"82","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\reusable\\DocsLink.js":"83","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\alertReducer.js":"84","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\alertAction.js":"85","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\AlertSystemPage\\AlertSystemPage.js":"86","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\ManageAllergenPage.js":"87","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\AddAllergyComponent.js":"88","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\DeleteAllergyComponent.js":"89","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\UpdateAllergyComponent.js":"90","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageAllergyReducer.js":"91","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageAllergyAction.js":"92","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageDietaryReducer.js":"93","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageCuisineReducer.js":"94","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageLifeStyleReducer.js":"95","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\ManageDietaryPage.js":"96","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\DeleteDietaryComponent.js":"97","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\AddDietaryComponent.js":"98","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\UpdateDietaryComponent.js":"99","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageDietaryAction.js":"100","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageLifestyleReducer.js":"101","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\ManageLifestylePage.js":"102","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\DeleteLifestyleComponent.js":"103","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\UpdateLifestyleComponent.js":"104","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\AddLifestyleComponent.js":"105","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageLifestyleAction.js":"106","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\ManageCuisinePage.js":"107","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\AddCuisineComponent.js":"108","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\DeleteCuisineComponent.js":"109","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\UpdateCuisineComponent.js":"110","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageCuisineAction.js":"111","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageFeaturesReducer.js":"112","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\ManageFeaturesPage.js":"113","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\AddFeaturesComponent.js":"114","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\DeleteFeaturesComponent.js":"115","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\UpdateFeaturesComponent.js":"116","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageFeaturesAction.js":"117","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageCookingReducer.js":"118","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\ManageCookingPage.js":"119","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\DeleteCookingComponent.js":"120","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\UpdateCookingComponent.js":"121","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\AddCookingComponent.js":"122","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageCookingAction.js":"123","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\CustomLoadingComp\\CustomLoadingComp.jsx":"124"},{"size":835,"mtime":1609995644913,"results":"125","hashOfConfig":"126"},{"size":407,"mtime":1609924755762,"results":"127","hashOfConfig":"126"},{"size":3813,"mtime":1607917532000,"results":"128","hashOfConfig":"126"},{"size":988,"mtime":1612445650648,"results":"129","hashOfConfig":"126"},{"size":1404,"mtime":1613016297408,"results":"130","hashOfConfig":"126"},{"size":1979,"mtime":1613016018675,"results":"131","hashOfConfig":"126"},{"size":2697,"mtime":1612422002880,"results":"132","hashOfConfig":"126"},{"size":978,"mtime":1607917532000,"results":"133","hashOfConfig":"126"},{"size":6933,"mtime":1607917532000,"results":"134","hashOfConfig":"126"},{"size":6920,"mtime":1607917532000,"results":"135","hashOfConfig":"126"},{"size":1748,"mtime":1610970550668,"results":"136","hashOfConfig":"126"},{"size":1895,"mtime":1607917532000,"results":"137","hashOfConfig":"126"},{"size":4686,"mtime":1607917532000,"results":"138","hashOfConfig":"126"},{"size":671,"mtime":1610967479585,"results":"139","hashOfConfig":"126"},{"size":1426,"mtime":1609937309364,"results":"140","hashOfConfig":"126"},{"size":2371,"mtime":1610969638413,"results":"141","hashOfConfig":"126"},{"size":8878,"mtime":1613040500058,"results":"142","hashOfConfig":"126"},{"size":8057,"mtime":1613040456152,"results":"143","hashOfConfig":"126"},{"size":2864,"mtime":1607917532000,"results":"144","hashOfConfig":"126"},{"size":821,"mtime":1609998692418,"results":"145","hashOfConfig":"126"},{"size":1313,"mtime":1607917532000,"results":"146","hashOfConfig":"126"},{"size":639,"mtime":1609997362936,"results":"147","hashOfConfig":"126"},{"size":7218,"mtime":1613021418733,"results":"148","hashOfConfig":"126"},{"size":4533,"mtime":1612501310871,"results":"149","hashOfConfig":"126"},{"size":621,"mtime":1612872189895,"results":"150","hashOfConfig":"126"},{"size":9681,"mtime":1613101860275,"results":"151","hashOfConfig":"126"},{"size":1200,"mtime":1607917532000,"results":"152","hashOfConfig":"126"},{"size":2132,"mtime":1607917532000,"results":"153","hashOfConfig":"126"},{"size":12301,"mtime":1607917532000,"results":"154","hashOfConfig":"126"},{"size":7005,"mtime":1609992281951,"results":"155","hashOfConfig":"126"},{"size":2130,"mtime":1613015641663,"results":"156","hashOfConfig":"126"},{"size":3069,"mtime":1610422981404,"results":"157","hashOfConfig":"126"},{"size":3690,"mtime":1609992281953,"results":"158","hashOfConfig":"126"},{"size":23856,"mtime":1607917532000,"results":"159","hashOfConfig":"126"},{"size":5781,"mtime":1609992862130,"results":"160","hashOfConfig":"126"},{"size":5915,"mtime":1609992281953,"results":"161","hashOfConfig":"126"},{"size":11002,"mtime":1610092349098,"results":"162","hashOfConfig":"126"},{"size":3610,"mtime":1609992281953,"results":"163","hashOfConfig":"126"},{"size":5333,"mtime":1609992281953,"results":"164","hashOfConfig":"126"},{"size":611,"mtime":1609992281954,"results":"165","hashOfConfig":"126"},{"size":595,"mtime":1609992281953,"results":"166","hashOfConfig":"126"},{"size":7813,"mtime":1613101772769,"results":"167","hashOfConfig":"126"},{"size":968,"mtime":1609992281953,"results":"168","hashOfConfig":"126"},{"size":16494,"mtime":1609992281953,"results":"169","hashOfConfig":"126"},{"size":6174,"mtime":1609992281953,"results":"170","hashOfConfig":"126"},{"size":33221,"mtime":1610098469359,"results":"171","hashOfConfig":"126"},{"size":15401,"mtime":1607917532000,"results":"172","hashOfConfig":"126"},{"size":5623,"mtime":1609992281952,"results":"173","hashOfConfig":"126"},{"size":24665,"mtime":1609992282219,"results":"174","hashOfConfig":"126"},{"size":2722,"mtime":1609992281956,"results":"175","hashOfConfig":"126"},{"size":2975,"mtime":1609992281954,"results":"176","hashOfConfig":"126"},{"size":2915,"mtime":1609992281952,"results":"177","hashOfConfig":"126"},{"size":9430,"mtime":1609992281952,"results":"178","hashOfConfig":"126"},{"size":2171,"mtime":1609992281952,"results":"179","hashOfConfig":"126"},{"size":5779,"mtime":1609992281953,"results":"180","hashOfConfig":"126"},{"size":51533,"mtime":1609992281953,"results":"181","hashOfConfig":"126"},{"size":12867,"mtime":1609992281951,"results":"182","hashOfConfig":"126"},{"size":6881,"mtime":1609992281953,"results":"183","hashOfConfig":"126"},{"size":18188,"mtime":1609992340071,"results":"184","hashOfConfig":"126"},{"size":9266,"mtime":1609992282218,"results":"185","hashOfConfig":"126"},{"size":1732,"mtime":1609992240739,"results":"186","hashOfConfig":"126"},{"size":2085,"mtime":1609992281953,"results":"187","hashOfConfig":"126"},{"size":5053,"mtime":1609992281952,"results":"188","hashOfConfig":"126"},{"size":560,"mtime":1612443347156,"results":"189","hashOfConfig":"126"},{"size":4031,"mtime":1607917532000,"results":"190","hashOfConfig":"126"},{"size":4776,"mtime":1607917532000,"results":"191","hashOfConfig":"126"},{"size":2442,"mtime":1607917532000,"results":"192","hashOfConfig":"126"},{"size":3294,"mtime":1607917532000,"results":"193","hashOfConfig":"126"},{"size":1545,"mtime":1607917532000,"results":"194","hashOfConfig":"126"},{"size":7359,"mtime":1612157702610,"results":"195","hashOfConfig":"126"},{"size":7843,"mtime":1612956185141,"results":"196","hashOfConfig":"126"},{"size":2253,"mtime":1607917532000,"results":"197","hashOfConfig":"126"},{"size":7332,"mtime":1612157550024,"results":"198","hashOfConfig":"126"},{"size":12764,"mtime":1612154441594,"results":"199","hashOfConfig":"126"},{"size":1283,"mtime":1610098673756,"results":"200","hashOfConfig":"126"},{"size":4304,"mtime":1612501210761,"results":"201","hashOfConfig":"126"},{"size":56,"mtime":1607917532000,"results":"202","hashOfConfig":"126"},{"size":1931,"mtime":1612501229460,"results":"203","hashOfConfig":"126"},{"size":2486,"mtime":1607917532000,"results":"204","hashOfConfig":"126"},{"size":2543,"mtime":1607917532000,"results":"205","hashOfConfig":"126"},{"size":4788,"mtime":1607917532000,"results":"206","hashOfConfig":"126"},{"size":2997,"mtime":1613018216523,"results":"207","hashOfConfig":"126"},{"size":581,"mtime":1607917532000,"results":"208","hashOfConfig":"126"},{"size":419,"mtime":1610968975710,"results":"209","hashOfConfig":"126"},{"size":454,"mtime":1610968934684,"results":"210","hashOfConfig":"126"},{"size":1879,"mtime":1611916513263,"results":"211","hashOfConfig":"126"},{"size":7736,"mtime":1614599945275,"results":"212","hashOfConfig":"126"},{"size":6310,"mtime":1612941238196,"results":"213","hashOfConfig":"126"},{"size":1257,"mtime":1612940571498,"results":"214","hashOfConfig":"126"},{"size":7915,"mtime":1612959285348,"results":"215","hashOfConfig":"126"},{"size":1996,"mtime":1612508261109,"results":"216","hashOfConfig":"126"},{"size":5167,"mtime":1612940939902,"results":"217","hashOfConfig":"126"},{"size":1914,"mtime":1613016266107,"results":"218","hashOfConfig":"126"},{"size":1914,"mtime":1613016184906,"results":"219","hashOfConfig":"126"},{"size":1965,"mtime":1612434733948,"results":"220","hashOfConfig":"126"},{"size":6810,"mtime":1613101588836,"results":"221","hashOfConfig":"126"},{"size":1197,"mtime":1612431705472,"results":"222","hashOfConfig":"126"},{"size":3861,"mtime":1612433973358,"results":"223","hashOfConfig":"126"},{"size":4768,"mtime":1612439019004,"results":"224","hashOfConfig":"126"},{"size":4155,"mtime":1612499054238,"results":"225","hashOfConfig":"126"},{"size":1962,"mtime":1613016277007,"results":"226","hashOfConfig":"126"},{"size":7048,"mtime":1613101718371,"results":"227","hashOfConfig":"126"},{"size":1207,"mtime":1612434832896,"results":"228","hashOfConfig":"126"},{"size":4788,"mtime":1612437534826,"results":"229","hashOfConfig":"126"},{"size":3877,"mtime":1612434828476,"results":"230","hashOfConfig":"126"},{"size":4211,"mtime":1612501171841,"results":"231","hashOfConfig":"126"},{"size":6988,"mtime":1613101539326,"results":"232","hashOfConfig":"126"},{"size":3905,"mtime":1614600538243,"results":"233","hashOfConfig":"126"},{"size":1241,"mtime":1613101969404,"results":"234","hashOfConfig":"126"},{"size":4794,"mtime":1614601747214,"results":"235","hashOfConfig":"126"},{"size":4429,"mtime":1614602233812,"results":"236","hashOfConfig":"126"},{"size":1941,"mtime":1613016273136,"results":"237","hashOfConfig":"126"},{"size":7723,"mtime":1613101656205,"results":"238","hashOfConfig":"126"},{"size":6286,"mtime":1612444447653,"results":"239","hashOfConfig":"126"},{"size":1218,"mtime":1612444451285,"results":"240","hashOfConfig":"126"},{"size":7876,"mtime":1612445021992,"results":"241","hashOfConfig":"126"},{"size":4984,"mtime":1612501096508,"results":"242","hashOfConfig":"126"},{"size":1920,"mtime":1613016174781,"results":"243","hashOfConfig":"126"},{"size":7545,"mtime":1613101467258,"results":"244","hashOfConfig":"126"},{"size":1257,"mtime":1613101928643,"results":"245","hashOfConfig":"126"},{"size":7861,"mtime":1613102017977,"results":"246","hashOfConfig":"126"},{"size":6335,"mtime":1613102077290,"results":"247","hashOfConfig":"126"},{"size":4898,"mtime":1612500928469,"results":"248","hashOfConfig":"126"},{"size":1463,"mtime":1612528831650,"results":"249","hashOfConfig":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},"mv8w9c",{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"252"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"252"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"252"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"252"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"252"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"252"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"252"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"252"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"252"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"252"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"252"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"252"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"252"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"252"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"252"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"440","messages":"441","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"252"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"252"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"252"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"252"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"252"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"252"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"252"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"252"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"252"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"252"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"252"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"252"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"252"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"252"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"252"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"252"},"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\index.js",[],["530","531"],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\store\\index.js",["532"],"import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport rootReducer from \"../reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\index.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\index.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageUsersReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageRestaurantReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\generalReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\sygnet.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\logo-negative.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\assets\\icons\\logo.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\App.js",["533","534","535","536"],"import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './scss/style.scss';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\nimport TheContent from './containers/TheContent';\nimport AlertSystemPage from './views/pages/AlertSystemPage/AlertSystemPage'\n\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\n\n\n// Pages\nconst Login = React.lazy(() => import('./views/pages/login/Login'));\nconst Register = React.lazy(() => import('./views/pages/register/Register'));\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'));\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'));\nconst ResetPasswordPage = React.lazy(() => import('./views/pages/ResetPasswordPage/ResetPasswordPage'));\n\nfunction App() {\n\n    return (\n          <React.Suspense fallback={loading}>\n             <div>\n                <AlertSystemPage/>\n              </div>\n            <Switch>\n              <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} />\n              <Route exact path=\"/reset_password/:token\" render={(props) => <ResetPasswordPage {...props} />} />\n              {/* <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} /> */}\n              <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props}/>} />\n              <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props}/>} />\n              <PrivateRoute>\n                <TheContent/>\n              </PrivateRoute>\n            </Switch>\n          </React.Suspense>\n    );\n}\n\nexport default App;\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\polyfill.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\serviceWorker.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\PrivateRoute.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\PublicRoute.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheContent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\login\\Login.js",["537","538","539"],"import React, { useState } from \"react\";\nimport {useHistory} from 'react-router-dom'\nimport {CButton, CCard, CCardBody, CCardGroup, CCol, CContainer, CForm, CInput,CInvalidFeedback, CInputGroup, CInputGroupPrepend,CInputGroupAppend, CInputGroupText, CRow } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch,useSelector} from \"react-redux\";\nimport { forgotPassword, getLogin } from \"../../../redux/actions/generalActions\";\nimport CustomLoadingComp from \"../CustomLoadingComp/CustomLoadingComp\";\nimport Logo from '../../../assets/images/logo2.svg'\n\n\nconst passwordRegExp = RegExp(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,24}$/);\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [type, setType] = useState(\"password\")\n  const [isLoginPage, setLoginPage] = useState(true)\n\n  const validationSchemaForLogin = Yup.object().shape({\n    email: Yup.string().email(\"Email must be a valid email\").required('Email is required'),\n    password: Yup\n      .string()\n      .label('Password')\n      .required('Password Required')\n      .min(8, 'Seems a bit short(Min 8 characters)...')\n      .max(24, 'Please try a shorter password(Max 24 characters).')\n      .matches(passwordRegExp, 'Password Must Have Letter and Number'),\n  }); \n\n  const validationSchemaForForgotPassword = Yup.object().shape({\n    email: Yup.string().email(\"Email must be a valid email\").required('Email is required'),    \n  });\n\n  const handleLoginForm = (input) => {\n    let obj = {\n        email: input.email,\n        password: input.password\n    }\n    dispatch(getLogin(obj, history))\n  }\n\n  const handlelForgotPassword=(input)=>{\n    let obj = {\n        email: input.email,\n    }\n    dispatch(forgotPassword(obj))\n  } \n\n  const handlePassword = () => {\n    if (type === \"password\") {\n        setType(\"text\")\n    } else {\n        setType(\"password\")\n    }\n  }\n  let forgotPasswordData = useSelector((state)=>{\n    return state.general.forgot_Password\n  });\n  let loading = useSelector((state)=>{\n    return state.general.isLoading\n  });\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n            \n              <CCard className=\"p-4\">\n                <CCardBody>\n                  {isLoginPage\n                  ?\n                  \n                  <Formik\n                      initialValues={{ email: '', password: '' }} validationSchema={validationSchemaForLogin}\n                      onSubmit={(values) => { console.log('values => ', values);  handleLoginForm(values) }}\n                    >\n                    {({\n                      values, errors, touched, handleChange, handleBlur, isSubmitting,\n                      /* and other goodies */\n                    }) => (\n                      <Form>\n\n                        <h1>Login</h1>\n                        <p className=\"text-muted\">Sign In to your account</p>\n                        <CInputGroup className=\"mb-1\">\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <Field name=\"email\" placeholder=\"Email\" className={`form-control ${touched.email && errors.email?\"is-invalid\": touched.email && !errors.email?\"is-valid\":null}`}/>\n                          <CInvalidFeedback className=\"help-block\">{errors.email}</CInvalidFeedback>     \n                        </CInputGroup>\n\n                        <CInputGroup className=\"mt-4 mb-1\">\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon  name=\"cil-lock-locked\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <Field type={type} name=\"password\" placeholder=\"Password\"  className={`form-control ${touched.password && errors.password?\"is-invalid\": touched.password && !errors.password?\"is-valid\":null}`} />\n                            <CInputGroupAppend>\n                                <CInputGroupText type=\"button\" color=\"light\" onClick={() => handlePassword()}>\n                                    {type=== \"password\"?\n                                        <img src={'images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\n                                    :\n                                        <img src={'images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\n                                    }\n                                </CInputGroupText>\n                            </CInputGroupAppend>\n                            <CInvalidFeedback className=\"help-block\">{errors.password}</CInvalidFeedback>     \n                        </CInputGroup>\n                        <CRow className=\"mt-4\">\n                          <CCol xs=\"6\">\n                            <CButton  type=\"submit\" className=\"px-4 pinkbg-btn\">Login</CButton>\n                          </CCol>\n                          <CCol xs=\"6\" className=\"text-right\">\n                            <CButton onClick={() =>{setLoginPage(false)}} color=\"link\" className=\"px-0 pink-txt trans_button\">Forgot password?</CButton>\n                          </CCol>\n                        </CRow>\n                        <React.Fragment>\n                          {loading?\n                          <section className=\"container\">\n                            <CustomLoadingComp/>\n                            </section>\n                          :\n                            null\n                          }\n                        </React.Fragment>\n                      </Form>\n                    )}\n                  </Formik>\n                  \n                  :\n                  \n                  <Formik\n                      initialValues={{ email: '' }} validationSchema={validationSchemaForForgotPassword}\n                      onSubmit={(values) => { console.log('values => ', values);  handlelForgotPassword(values) }}\n                    >\n                    {({\n                      values, errors, touched, handleChange, handleBlur, isSubmitting,\n                      /* and other goodies */\n                    }) => (\n                      <Form>\n\n                        <h1>Forgot Password</h1>\n                        <p className=\"text-muted\">Enter Your Email Address</p>\n                        <CInputGroup className=\"mb-1\">\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <Field name=\"email\" placeholder=\"Email\" className={`form-control ${touched.email && errors.email?\"is-invalid\": touched.email && !errors.email?\"is-valid\":null}`} />\n                          <CInvalidFeedback className=\"help-block\">{errors.email}</CInvalidFeedback>     \n                        </CInputGroup>\n                        {/* <div className=\"error pink-txt f-11\">{(touched.email && errors.email && errors.email) || forgotPasswordData&& forgotPasswordData.message}</div> */}\n                        <CRow className=\"mt-4\">\n                          <CCol xs=\"6\">\n                            <CButton  type=\"submit\" className=\"px-4 pinkbg-btn\">Reset Password</CButton>\n                          </CCol>\n                          <CCol xs=\"6\" className=\"text-right\">\n                            <CButton onClick={() =>{setLoginPage(true)}} color=\"link\" className=\"px-0 pink-txt trans_button\">Sign In ?</CButton>\n                          </CCol>\n                        </CRow>\n                        <React.Fragment>\n                          {loading?\n                            <CustomLoadingComp/>\n                          :\n                            null\n                          }\n                        </React.Fragment>\n                      </Form>\n                    )}\n                  </Formik>\n                  \n                  }\n                </CCardBody>\n\n              </CCard>\n\n              \n              <CCard className=\"text-white bg-pickypigs py-5 d-md-down-none\" style={{ width: '44%' }}>\n                <CCardBody className=\"text-center d-flex align-items-center\">\n                    <img src={Logo} className=\"img-fluid m-auto\" width=\"150px\" alt=\"Logo\"/>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ResetPasswordPage\\ResetPasswordPage.js",["540"],"import React, { useState } from \"react\";\r\nimport {useHistory,useParams} from 'react-router-dom'\r\nimport {CButton, CCard, CCardBody, CCardGroup, CCol, CContainer, CLabel,CInputGroupAppend, CFormGroup,CInvalidFeedback, CInputGroup, CInputGroupPrepend, CInputGroupText, CRow } from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch,useSelector} from \"react-redux\";\r\nimport {resetPassword } from \"../../../redux/actions/generalActions\";\r\nimport CustomLoadingComp from \"../CustomLoadingComp/CustomLoadingComp\";\r\nimport Logo from '../../../assets/images/logo2.svg'\r\n\r\n\r\nconst ResetPasswordPage = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params=useParams();\r\n    const [type, setType] = useState(\"password\")\r\n    const [confirmType, setConfirmType] = useState(\"password\")\r\n    let  mytoken  = params.token;\r\n\r\n\r\n    const phoneRegExp = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\r\n    const passwordRegExp = RegExp(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,24}$/);\r\n\r\n    const validationSchemaFormat = Yup.object().shape({\r\n    newPassword: Yup\r\n    .string()\r\n    .label('Password')\r\n    .required('Password Required')\r\n    .min(8, 'Seems a bit short(Min 8 characters)...')\r\n    .max(24, 'Please try a shorter password(Max 24 characters).')\r\n    .matches(passwordRegExp, 'Password Must Have Letter and Number'),\r\n    \r\n    confirmPassword: Yup\r\n        .string()\r\n        .required()\r\n        .label('Confirm password')\r\n        .test('passwords-match', 'Passwords must match ', function(value) {\r\n        return this.parent.newPassword === value;\r\n        }),\r\n         \r\n    });\r\n\r\n  \r\n    const handleSavePassword = (input) => {\r\n        let obj = {\r\n            token:mytoken,\r\n            newPassword: input.newPassword,\r\n            confirmPassword: input.confirmPassword\r\n        }\r\n        dispatch(resetPassword(obj, history))\r\n    }\r\n\r\n  \r\n\r\n    const handleShowPassword = () => {\r\n            if (type === \"password\") {\r\n                setType(\"text\")\r\n            } else {\r\n                setType(\"password\")\r\n            }\r\n        }\r\n    const handleShowConfirmPassword=()=>{\r\n            if (confirmType === \"password\") {\r\n                setConfirmType(\"text\")\r\n            } else {\r\n                setConfirmType(\"password\")\r\n            }\r\n        }\r\n    let loading = useSelector((state)=>{\r\n    return state.general.isLoading\r\n    });    \r\n \r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md=\"8\">\r\n            <CCardGroup>\r\n            \r\n              <CCard className=\"p-4\">\r\n                <CCardBody>\r\n                  <Formik\r\n                      initialValues={{ newPassword: '',confirmPassword:'' }} validationSchema={validationSchemaFormat}\r\n                      onSubmit={(values) => { console.log('values => ', values);  handleSavePassword(values) }}\r\n                    >\r\n                    {({\r\n                      values, errors, touched, handleChange, handleBlur, isSubmitting,\r\n                      /* and other goodies */\r\n                    }) => (\r\n                      <Form>\r\n\r\n                        <h1>RESET PASSWORD</h1>\r\n                        <p className=\"text-muted\">Enter New Password</p>\r\n                        <CFormGroup className=\"mt-4 mb-1\">\r\n                          <CLabel >New Password</CLabel>\r\n                          <CInputGroup >\r\n                            <CInputGroupPrepend>\r\n                              <CInputGroupText>\r\n                                <CIcon name=\"cil-lock-locked\" />\r\n                              </CInputGroupText>\r\n                            </CInputGroupPrepend>\r\n                            <Field type={type} name=\"newPassword\" placeholder=\"New Password\" className={`form-control ${touched.newPassword && errors.newPassword?\"is-invalid\": touched.newPassword && !errors.newPassword?\"is-valid\":null}`}/>\r\n                            <CInputGroupAppend>\r\n                                <CInputGroupText type=\"button\" color=\"light\" onClick={() => handleShowPassword()}>\r\n                                    {type=== \"password\"?\r\n                                        <img src={'../images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                    :\r\n                                        <img src={'../images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                    }\r\n                                </CInputGroupText>\r\n                            </CInputGroupAppend>\r\n                            <CInvalidFeedback className=\"help-block\">{errors.newPassword}</CInvalidFeedback>\r\n                          </CInputGroup>\r\n                        {/* <div className=\"error pink-txt f-11\">{(touched.newPassword && errors.newPassword && errors.newPassword)}</div> */}\r\n                        </CFormGroup>\r\n\r\n                        <CFormGroup className=\"mt-3 mb-1\">\r\n                          <CLabel >Confirm Password</CLabel>\r\n                          <CInputGroup >\r\n                            <CInputGroupPrepend>\r\n                              <CInputGroupText>\r\n                                <CIcon name=\"cil-lock-locked\" />\r\n                              </CInputGroupText>\r\n                            </CInputGroupPrepend>\r\n                            <Field type={confirmType} name=\"confirmPassword\" placeholder=\"Confirm Password\" className={`form-control ${touched.confirmPassword && errors.confirmPassword?\"is-invalid\": touched.confirmPassword && !errors.confirmPassword?\"is-valid\":null}`}/>\r\n                            <CInputGroupAppend>\r\n                                <CInputGroupText type=\"button\" color=\"light\" onClick={() => handleShowConfirmPassword()}>\r\n                                    {confirmType=== \"password\"?\r\n                                        <img src={'../images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                    :\r\n                                        <img src={'../images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                    }\r\n                                </CInputGroupText>\r\n                            </CInputGroupAppend>\r\n                            <CInvalidFeedback className=\"help-block\">{errors.confirmPassword}</CInvalidFeedback>\r\n                          </CInputGroup>\r\n                        {/* <div className=\"error pink-txt f-11\">{(touched.confirmPassword && errors.confirmPassword && errors.confirmPassword)}</div> */}\r\n                        </CFormGroup>\r\n\r\n                        <CRow className=\"mt-4\">\r\n                          <CCol xs=\"6\">\r\n                            <CButton type=\"submit\" className=\"px-4 pinkbg-btn\">Change Password</CButton>\r\n                          </CCol>\r\n                        </CRow>\r\n                        <React.Fragment>\r\n                          {loading?\r\n                            <CustomLoadingComp path=\"../\"/>\r\n                          :\r\n                            null\r\n                          }\r\n                        </React.Fragment>\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n                  \r\n                </CCardBody>\r\n\r\n              </CCard>\r\n\r\n              \r\n              <CCard className=\"text-white bg-pickypigs py-5 d-md-down-none\" style={{ width: '44%' }}>\r\n                <CCardBody className=\"text-center d-flex align-items-center\">\r\n                  <img src={Logo} className=\"img-fluid m-auto\" width=\"150px\" alt=\"Logo\"/>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\register\\Register.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\page404\\Page404.js",["541","542","543","544","545","546","547"],"import React from 'react'\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupAppend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nconst Page404 = () => {\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"6\">\n            <div className=\"clearfix\">\n              <h1 className=\"float-left display-3 mr-4\">404</h1>\n              <h4 className=\"pt-3\">Oops! You{'\\''}re lost.</h4>\n              <p className=\"text-muted float-left\">The page you are looking for was not found.</p>\n            </div>\n            \n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Page404\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\page500\\Page500.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheLayout.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\routes.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\generalActions.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheFooter.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageUsersPage\\ManageUsersPage.js",["548","549","550","551","552","553","554","555","556"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CBadge,CCard,CCardBody,CCardHeader,CCol,CDataTable,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { downloadUserData, getAllUsersData } from '../../../redux/actions/manageUsersAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable, { defaultThemes }from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport moment from \"moment\";\r\n// import DeleteRestaurantModalComp from './DeleteRestaurantModalComp';\r\n// import AddRestaurantModalComp from './AddRestaurantModalComp';\r\nimport UpdateUserPasswordModalComp from './UpdateUserPasswordModalComp';\r\nimport Axios from '../../../redux/actions/axios';\r\n\r\n\r\n\r\n\r\nconst ManageUsersPage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [selectedMail,setSelectedMail]=useState('')\r\n    const [addRestaurantModalShow, setAddRestaurantModalShow] = useState(false);\r\n    const [updateUserPasswordModalShow, setUpdateUserPasswordModalShow] = useState(false);\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllUsersData({start:0}));\r\n    // },[dispatch]);\r\n\r\n    // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllUsersData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllUsersData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllUsersData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n    let allUsers_Data = useSelector((state)=>{\r\n        return state.users\r\n    });\r\n\r\n    let {isLoading,users_Data,totalrows}=allUsers_Data;\r\n\r\n    const search=(datas)=>{\r\n        return datas.filter(\r\n            (data)=>data.email.toLowerCase().indexOf(inputValue)>-1\r\n            );\r\n        // const columns=datas[0]&&Object.keys(datas[0]);\r\n        // return datas.filter((data)=>columns.some((column)=>data[column].toString().toLowerCase().indexOf(inputValue.toLowerCase())>-1));\r\n    }\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'user_preferenceDetail.name',name: 'Name',  },\r\n      { selector: 'email', name: 'Email', sortable: true},\r\n      // { selector: 'user_preferenceDetail.myPreferences.allergenInformation', name: 'Allergen Info',  cell:(row)=><span>{row.user_preferenceDetail.myPreferences.allergenInformation.map((data,index)=>{return(<div key={index}><p>{data.name}</p></div>)})}</span> },\r\n      // { selector: 'user_preferenceDetail.myPreferences.dietaryPreferences', name: 'Dietary Preferences',  cell:(row)=><span>{row.user_preferenceDetail.myPreferences.dietaryPreferences.map((data,index)=>{return(<div key={index}><p>{data.name}</p></div>)})}</span> },\r\n      // { selector: 'user_preferenceDetail.myPreferences.lifestyleChoice', name: 'Lifestyle Choice',  cell:(row)=><span>{row.user_preferenceDetail.myPreferences.lifestyleChoice.map((data,index)=>{return(<div key={index}><p>{data.name}</p></div>)})}</span> },\r\n      // { selector: 'user_preferenceDetail.myPreferences.restaurantFeatures', name: 'restaurant Features',  cell:(row)=><span>{row.user_preferenceDetail.myPreferences.restaurantFeatures.map((data,index)=>{return(<div key={index}><p>{data.name}</p></div>)})}</span> },\r\n      { selector: 'user_preferenceDetail.phone',name: 'Mobile',  cell:(row)=><span>{row.user_preferenceDetail.phone}</span> },\r\n      { selector: 'updatedAt', name: 'Updated At', cell:(row)=><span>{moment(row.updatedAt).format(\" Do MMMM, YYYY\")}</span>  },\r\n      { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn-group\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateUserPasswordModalShow(true);setSelectedId(row._id);setSelectedMail(row.email)}}>Update Password</CDropdownItem>\r\n            {/* <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id)}}>Delete</CDropdownItem> */}\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n  \r\n    ];\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Download SCV\r\nconst  handleDownloadScv = () => {\r\n  let dataURL = `/super_admin/manage_user/export_user`;\r\n  let responseType='blob'\r\n  Axios\r\n        .post(dataURL,responseType)\r\n        .then(response => {\r\n          console.log(response)\r\n          const url = window.URL.createObjectURL(new Blob([response.data]));\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.setAttribute('download', 'file.csv'); //or any other extension\r\n          document.body.appendChild(link);\r\n          link.click();\r\n        })\r\n        .catch(error => console.log(error));\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manage Users\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\" className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" disabled onClick={() => {setAddRestaurantModalShow(true);setSelectedId(null);setSelectedMail(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add User\r\n                  </span> \r\n                </CButton>\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill ml-3\" onClick={handleDownloadScv}>\r\n                    <CIcon name=\"cil-cloud-download\" alt=\"Settings\" className=\"mr-1\"/>\r\n                    {/* <span className=\"edit-icon\"> */}\r\n                      Export CSV\r\n                    {/* </span>  */}\r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                {/* <AddRestaurantModalComp show={addRestaurantModalShow} onClose={() => setAddRestaurantModalShow(false)} /> */}\r\n              </div>\r\n            </CRow>\r\n\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            users_Data && users_Data.userList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={search(users_Data.userList)}\r\n                                highlightOnHover\r\n                                noHeader\r\n                                overflowY\r\n                                striped\r\n                                responsive\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(users_Data.userList&&users_Data.userList.user_preferenceDetail.myPreferences)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdateUserPasswordModalComp \r\n          show={updateUserPasswordModalShow} onClose={() => setUpdateUserPasswordModalShow(false)} \r\n          selectedid={selectedId} selectedmail={selectedMail} \r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      {/* <DeleteRestaurantModalComp show={deleteModalShow} onClose={() => setDeleteModalShow(false)} selectedid={selectedId}/> */}\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageUsersPage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\users\\User.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\users\\Users.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\widgets\\Widgets.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\theme\\typography\\Typography.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheSidebar.js",["557"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CCreateElement,\n  CSidebar,\n  CSidebarBrand,\n  CSidebarNav,\n  CSidebarNavDivider,\n  CSidebarNavTitle,\n  CSidebarMinimizer,\n  CSidebarNavDropdown,\n  CSidebarNavItem,\n  CImg\n} from '@coreui/react'\n\nimport CIcon from '@coreui/icons-react'\n\n// sidebar nav config\nimport navigation from './_nav'\nimport { setSideBar } from '../redux/actions/generalActions'\n\nconst TheSidebar = () => {\n  const dispatch = useDispatch()\n  const show = useSelector(state => state.general.sidebarShow)\n\n  return (\n    <CSidebar\n      show={show}\n      onShowChange={(val) => dispatch(setSideBar({ sidebarShow: val}))}\n    >\n      <CSidebarBrand className=\"d-md-down-none\" to=\"/\">\n        {/* <CIcon\n          className=\"c-sidebar-brand-full\"\n          name=\"logo-negative\"\n          height={35}\n        /> */}\n\n        <section className=\"c-sidebar-brand-full\">\n        <div className=\"d-flex justify-content-center align-items-center\">\n          <CImg\n              src={'avatars/logo.svg'}\n              className=\"c-avatar-img\"\n              style={{width:30}}\n              alt=\"Picky_pigs_super_admin\"\n            />\n          <p style={{color:'#ffffff',fontSize:25,fontWeight:'bold'}} className=\"ml-3 mb-0\">Picky Pigs</p>\n        </div>\n        </section>\n        \n        <section className=\"c-sidebar-brand-minimized\">\n          <CImg\n              src={'avatars/logo.svg'}\n              className=\"c-avatar-img\"\n              style={{width:30}}\n              alt=\"Picky_pigs_super_admin\"\n          />\n        </section>\n\n        {/* <CIcon\n          className=\"c-sidebar-brand-minimized\"\n          name=\"sygnet\"\n          height={35}\n        /> */}\n      </CSidebarBrand>\n      <CSidebarNav>\n\n        <CCreateElement\n          items={navigation}\n          components={{\n            CSidebarNavDivider,\n            CSidebarNavDropdown,\n            CSidebarNavItem,\n            CSidebarNavTitle\n          }}\n        />\n      </CSidebarNav>\n      <CSidebarMinimizer className=\"c-d-md-down-none\"/>\n    </CSidebar>\n  )\n}\n\nexport default React.memo(TheSidebar)\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeader.js",["558","559","560","561","562"],"import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CHeader,\n  CToggler,\n  CHeaderBrand,\n  CHeaderNav,\n  CHeaderNavItem,\n  CHeaderNavLink,\n  CSubheader,\n  CBreadcrumbRouter,\n  CLink\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\n// routes config\nimport routes from '../routes'\nimport TheHeaderDropdown from './TheHeaderDropdown'\nimport TheHeaderDropdownMssg from './TheHeaderDropdownMssg'\nimport TheHeaderDropdownNotif from './TheHeaderDropdownNotif'\nimport TheHeaderDropdownTasks from './TheHeaderDropdownTasks'\n\n\nimport { setSideBar } from '../redux/actions/generalActions'\n\nconst TheHeader = () => {\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector(state => state.general.sidebarShow)\n\n  const toggleSidebar = () => {\n    const val = [true, 'responsive'].includes(sidebarShow) ? false : 'responsive'\n    dispatch(setSideBar({ sidebarShow: val}))\n  }\n\n  const toggleSidebarMobile = () => {\n    const val = [false, 'responsive'].includes(sidebarShow) ? true : 'responsive'\n    dispatch(setSideBar({ sidebarShow: val}))\n  }\n\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n      <CHeaderBrand className=\"mx-auto d-lg-none\" to=\"/\">\n        <CIcon name=\"logo\" height=\"48\" alt=\"Logo\"/>\n      </CHeaderBrand>\n\n      <CHeaderNav className=\"d-md-down-none mr-auto\">\n        <CHeaderNavItem className=\"px-3\" >\n          {/* <CHeaderNavLink to=\"/dashboard\">Dashboard</CHeaderNavLink> */}\n        </CHeaderNavItem>\n        {/* <CHeaderNavItem  className=\"px-3\">\n          <CHeaderNavLink to=\"/users\">Users</CHeaderNavLink>\n        </CHeaderNavItem>\n        <CHeaderNavItem className=\"px-3\">\n          <CHeaderNavLink>Settings</CHeaderNavLink>\n        </CHeaderNavItem> */}\n      </CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        {/* <TheHeaderDropdownNotif/>\n        <TheHeaderDropdownTasks/>\n        <TheHeaderDropdownMssg/> */}\n        <TheHeaderDropdown/>\n      </CHeaderNav>\n\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CBreadcrumbRouter \n          className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\" \n          routes={routes} \n        />\n          <div className=\"d-md-down-none mfe-2 c-subheader-nav\">\n            {/* <CLink className=\"c-subheader-nav-link\"href=\"#\">\n              <CIcon name=\"cil-speech\" alt=\"Settings\" />\n            </CLink> */}\n            {/* <CLink \n              className=\"c-subheader-nav-link\" \n              aria-current=\"page\" \n              to=\"/dashboard\"\n            >\n              <CIcon name=\"cil-graph\" alt=\"Dashboard\" />&nbsp;Dashboard\n            </CLink>\n            <CLink className=\"c-subheader-nav-link\" href=\"#\">\n              <CIcon name=\"cil-settings\" alt=\"Settings\" />&nbsp;Settings\n            </CLink> */}\n          </div>\n      </CSubheader>\n    </CHeader>\n  )\n}\n\nexport default TheHeader\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\theme\\colors\\Colors.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\dashboard\\Dashboard.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\Charts.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\alerts\\Alerts.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\modals\\Modals.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\badges\\Badges.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\notifications\\toaster\\Toaster.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\icons\\coreui-icons\\CoreUIIcons.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\icons\\flags\\Flags.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\ManageRestaurantPage.jsx",["563","564","565","566","567"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CBadge,CCard,CCardBody,CCardHeader,CCol,CDataTable,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { getAllRestaurantData } from '../../../redux/actions/manageRestaurantAction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable, { defaultThemes }from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport moment from \"moment\";\r\nimport DeleteRestaurantModalComp from './DeleteRestaurantModalComp';\r\nimport AddRestaurantModalComp from './AddRestaurantModalComp';\r\nimport UpdatePasswordModalComp from './UpdatePasswordModalComp';\r\nimport './ManageRestaurantPage.scss'\r\n\r\n\r\nconst ManageRestaurantPage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [addRestaurantModalShow, setAddRestaurantModalShow] = useState(false);\r\n    const [updateRestaurantModalShow, setUpdateRestaurantModalShow] = useState(false);\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllRestaurantData({start:0}));\r\n    // },[dispatch]);\r\n\r\n  // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllRestaurantData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllRestaurantData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllRestaurantData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n    let allRestaurant_data = useSelector((state)=>{\r\n        return state.restaurant\r\n    });\r\n\r\n    let {isLoading,restaurant_Data,totalrows}=allRestaurant_data;\r\n\r\n    const search=(datas)=>{\r\n        return datas.filter(\r\n            (data)=>data.email.toLowerCase().indexOf(inputValue)>-1\r\n            );\r\n        // const columns=datas[0]&&Object.keys(datas[0]);\r\n        // return datas.filter((data)=>columns.some((column)=>data[column].toString().toLowerCase().indexOf(inputValue.toLowerCase())>-1));\r\n    }\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'restaurants.name',name: 'Name', sortable: true, },\r\n      { selector: 'email', name: 'Email', sortable: true},\r\n      { selector: 'restaurants.company',name: 'Company', sortable: true},\r\n      { selector: 'restaurants.package', name: 'Package', sortable: true },\r\n      { selector: 'restaurants.phoneNumber',name: 'Mobile', sortable: true, cell:(row)=><span>{row.restaurants.phoneNumber}</span> },\r\n      { selector: 'updatedAt', name: 'Updated At', sortable: true,cell:(row)=><span>{moment(row.updatedAt).format(\" Do MMMM, YYYY\")}</span>  },\r\n      { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn d-inline-block\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateRestaurantModalShow(true);setSelectedId(row._id)}}>Update Password</CDropdownItem>\r\n            <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id)}}>Delete</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n\r\n    ];\r\n\r\n\r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manager Restaurant\r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\" className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" onClick={() => {setAddRestaurantModalShow(true);setSelectedId(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add Restaurant\r\n                  </span>\r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                <AddRestaurantModalComp \r\n                  show={addRestaurantModalShow} onClose={() => setAddRestaurantModalShow(false)} \r\n                  perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n                />\r\n              </div>\r\n            </CRow>\r\n\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            restaurant_Data.restaurantList && restaurant_Data.restaurantList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={search(restaurant_Data.restaurantList)}\r\n                                highlightOnHover\r\n                                overflowY\r\n                                noHeader\r\n                                striped\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(restaurant_Data.restaurantList)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdatePasswordModalComp \r\n          show={updateRestaurantModalShow} onClose={() => setUpdateRestaurantModalShow(false)} \r\n          selectedid={selectedId}\r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      <DeleteRestaurantModalComp \r\n        show={deleteModalShow} onClose={() => setDeleteModalShow(false)} \r\n        selectedid={selectedId}\r\n        perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n      />\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageRestaurantPage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\icons\\brands\\Brands.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\button-dropdowns\\ButtonDropdowns.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\button-groups\\ButtonGroups.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\buttons\\Buttons.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\buttons\\brand-buttons\\BrandButtons.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\tabs\\Tabs.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\switches\\Switches.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\tooltips\\Tooltips.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\progress-bar\\ProgressBar.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\popovers\\Popovers.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\navs\\Navs.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\paginations\\Pagnations.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\navbars\\Navbars.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\forms\\BasicForms.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\list-groups\\ListGroups.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\carousels\\Carousels.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\cards\\Cards.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\collapses\\Collapses.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\breadcrumbs\\Breadcrumbs.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\jumbotrons\\Jumbotrons.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\base\\tables\\Tables.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\axios.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\widgets\\WidgetsBrand.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\widgets\\WidgetsDropdown.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\users\\UsersData.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\ChartLineSimple.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\ChartBarSimple.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageUsersPage\\UpdateUserPasswordModalComp.js",["568","569","570","571","572","573","574","575"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup } from '@coreui/react';\r\n// import {deleteSelectedMenuData} from \"../../redux/actions/menuAction\"\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { updateSelectedUserPassword } from \"../../../redux/actions/manageUsersAction\";\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\n\r\n\r\nconst packages = [\"basic\",\"standard\",\"premiun\"];\r\nconst roles=[\"restaurant_admin\"];\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst UpdateUserPasswordModalComp = (props) => {\r\n    const dispatch=useDispatch();\r\n    const [type, setType] = useState(\"password\")\r\n    const [confirmType, setConfirmType] = useState(\"password\")\r\n    const initialValues = {\r\n        password:'',\r\n        confirmpassword:'',\r\n    }\r\n    const validationSchemaForm  = Yup.object().shape({\r\n     \r\n        password:Yup\r\n        .string()\r\n        .label('Password')\r\n        .required('Password Required')\r\n        .min(8, 'Seems a bit short(Min 8 characters)...')\r\n        .max(24, 'Please try a shorter password(Max 24 characters).')\r\n        .matches(passwordRegExp, 'Password should Have 1 Uppercase,1 Lowercase,1 digit,1 special characte'),\r\n\r\n        confirmpassword:Yup.string()\r\n        .required()\r\n        .label('Confirm password')\r\n        .test('passwords-match','Passwords must match ', function(value) {\r\n        return this.parent.password === value;\r\n        }),\r\n\r\n    });\r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            password: input.password,\r\n        }\r\n        dispatch(updateSelectedUserPassword(props.selectedid,obj));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n\r\n    const handleShowPassword = () => {\r\n        if (type === \"password\") {\r\n            setType(\"text\")\r\n        } else {\r\n            setType(\"password\")\r\n        }\r\n    }\r\n    const handleShowConfirmPassword=()=>{\r\n        if (confirmType === \"password\") {\r\n            setConfirmType(\"text\")\r\n        } else {\r\n            setConfirmType(\"password\")\r\n        }\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update User Password \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors,touched,values,isSubmitting,setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                       \r\n                                        <CFormGroup >\r\n                                            <CLabel >Password</CLabel>\r\n                                            <CInputGroup>\r\n                                                <Field type={type} name=\"password\" placeholder=\"Enter here\" className={`form-control ${touched.password && errors.password?\"is-invalid\": touched.password && !errors.password?\"is-valid\":null}`} />\r\n                                                <CInputGroupAppend>\r\n                                                    <CInputGroupText type=\"button\" color=\"light\" onClick={() => handleShowPassword()}>\r\n                                                        {type=== \"password\"?\r\n                                                            <img src={'images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        :\r\n                                                            <img src={'images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        }\r\n                                                    </CInputGroupText>\r\n                                                </CInputGroupAppend>\r\n                                                <CInvalidFeedback className=\"help-block\">{errors.password}</CInvalidFeedback>\r\n                                            </CInputGroup>\r\n                                        </CFormGroup>\r\n                                        <CFormGroup >\r\n                                            <CLabel >confirm Password</CLabel>\r\n                                            <CInputGroup>\r\n                                                <Field type={confirmType} name=\"confirmpassword\" placeholder=\"Enter here\" className={`form-control ${touched.confirmpassword && errors.confirmpassword?\"is-invalid\": touched.confirmpassword && !errors.confirmpassword?\"is-valid\":null}`} />\r\n                                                <CInputGroupAppend>\r\n                                                    <CInputGroupText type=\"button\" color=\"light\" onClick={() => handleShowConfirmPassword()}>\r\n                                                        {confirmType=== \"password\"?\r\n                                                            <img src={'images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        :\r\n                                                            <img src={'images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        }\r\n                                                    </CInputGroupText>\r\n                                                </CInputGroupAppend>\r\n                                                <CInvalidFeedback className=\"help-block\">{errors.confirmpassword}</CInvalidFeedback>\r\n                                            </CInputGroup>\r\n                                        </CFormGroup>\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={props.onClose}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\">Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateUserPasswordModalComp;","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\_nav.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdownTasks.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\UpdatePasswordModalComp.js",["576","577","578","579","580","581","582","583"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup} from '@coreui/react';\r\n// import {deleteSelectedMenuData} from \"../../redux/actions/menuAction\"\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { updateSelectedRestaurantPassword } from \"../../../redux/actions/manageRestaurantAction\";\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\n\r\n\r\nconst packages = [\"basic\",\"standard\",\"premiun\"];\r\nconst roles=[\"restaurant_admin\"]\r\n\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/);\r\n\r\nconst UpdatePasswordModalComp = (props) => {\r\n    const dispatch=useDispatch();\r\n    const [type, setType] = useState(\"password\")\r\n    const [confirmType, setConfirmType] = useState(\"password\")\r\n\r\n    const initialValues = {\r\n        password:'',\r\n        confirmpassword:'',\r\n    }\r\n    const validationSchemaForm  = Yup.object().shape({\r\n        password:Yup\r\n        .string()\r\n        .label('Password')\r\n        .required('Password Required')\r\n        .min(8, 'Seems a bit short(Min 8 characters)...')\r\n        .max(24, 'Please try a shorter password(Max 24 characters).')\r\n        .matches(passwordRegExp, 'Password should Have 1 Uppercase,1 Lowercase,1 digit,1 special characte'), \r\n\r\n        confirmpassword:Yup\r\n        .string()\r\n        .required()\r\n        .label('Confirm password')\r\n        .test('passwords-match','Passwords must match', function(value) {\r\n        return this.parent.password === value;\r\n        }),\r\n\r\n    });\r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            password: input.password,\r\n        }\r\n        dispatch(updateSelectedRestaurantPassword(props.selectedid,obj));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n    const handleShowPassword = () => {\r\n        if (type === \"password\") {\r\n            setType(\"text\")\r\n        } else {\r\n            setType(\"password\")\r\n        }\r\n    }\r\n    const handleShowConfirmPassword=()=>{\r\n        if (confirmType === \"password\") {\r\n            setConfirmType(\"text\")\r\n        } else {\r\n            setConfirmType(\"password\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update Restaurant Password \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors, touched,values, isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Password</CLabel>\r\n                                            <CInputGroup>\r\n                                                <Field type={type} name=\"password\" placeholder=\"Enter here\" className={`form-control ${touched.password && errors.password?\"is-invalid\": touched.password && !errors.password?\"is-valid\":null}`} />\r\n                                                <CInputGroupAppend>\r\n                                                    <CInputGroupText type=\"button\" color=\"light\" onClick={() => handleShowPassword()}>\r\n                                                        {type=== \"password\"?\r\n                                                            <img src={'images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        :\r\n                                                            <img src={'images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        }\r\n                                                    </CInputGroupText>\r\n                                                </CInputGroupAppend>\r\n                                                <CInvalidFeedback className=\"help-block\">{errors.password}</CInvalidFeedback>\r\n                                            </CInputGroup>\r\n                                        </CFormGroup>\r\n                                        <CFormGroup >\r\n                                            <CLabel >confirm Password</CLabel>\r\n                                            <CInputGroup>\r\n                                                <Field type={confirmType} name=\"confirmpassword\" placeholder=\"Enter here\" className={`form-control ${touched.confirmpassword && errors.confirmpassword?\"is-invalid\": touched.confirmpassword && !errors.confirmpassword?\"is-valid\":null}`} />\r\n                                                <CInputGroupAppend>\r\n                                                    <CInputGroupText type=\"button\" color=\"light\" onClick={() => handleShowConfirmPassword()}>\r\n                                                        {confirmType=== \"password\"?\r\n                                                            <img src={'images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        :\r\n                                                            <img src={'images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                        }\r\n                                                    </CInputGroupText>\r\n                                                </CInputGroupAppend>\r\n                                                <CInvalidFeedback className=\"help-block\">{errors.confirmpassword}</CInvalidFeedback>\r\n                                            </CInputGroup>\r\n                                        </CFormGroup>\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={props.onClose}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\">Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdatePasswordModalComp;","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\AddRestaurantModalComp.js",["584","585","586","587","588","589"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CFormGroup,CLabel,CRow,CCol,CInvalidFeedback,CCardFooter,\r\n    CModalHeader,CModalTitle,CModalBody ,CInputGroupAppend,CInputGroup,CInputGroupText} from '@coreui/react'\r\n// import {deleteSelectedMenuData} from \"../../redux/actions/menuAction\"\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment'\r\nimport { addRestaurantData } from \"../../../redux/actions/manageRestaurantAction\";\r\n\r\n\r\nconst packages = [\"basic\",\"standard\",\"premiun\"];\r\nconst roles=[\"restaurant_admin\"]\r\nconst phoneRegex = RegExp( /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst AddRestaurantModalComp = (props) => {\r\n    const dispatch=useDispatch();\r\n    const [confirmType, setConfirmType] = useState(\"password\")\r\n\r\n    const initialValues = {\r\n        name:'',\r\n        contactName:'',\r\n        company:'',\r\n        phoneNumber:'',\r\n        email:'',\r\n        password:'',\r\n        package:'',\r\n        role:'',\r\n        isAgreeToTerms:false\r\n    }\r\n\r\n    const validationSchema  = Yup.object().shape({\r\n        name:Yup.string().required('Restaurant Name is required'),\r\n        contactName:Yup.string().required('Contact Name is required'),\r\n        company:Yup.string().required('Company Name is required'),\r\n        phoneNumber:Yup.string().required('Phone Number is a required field').min(10, \"Min 10 Digits\").max(10, \"Max 10 Digits\").matches(phoneRegex, \"Invalid Phone Number\"),\r\n        email:Yup.string().email(\"Email must be a valid email\").required('Email is required'),\r\n        password: Yup\r\n        .string()\r\n        .label('Password')\r\n        .required('Password Required')\r\n        .min(8, 'Seems a bit short(Min 8 characters)...')\r\n        .max(24, 'Please try a shorter password(Max 24 characters).')\r\n        .matches(passwordRegExp, 'Password should Have 1 Uppercase,1 Lowercase,1 digit,1 special characte'),  \r\n        package:Yup.string().required('Please Select a package'),\r\n        role:Yup.string().required('Please Select a Role'),\r\n        isAgreeToTerms:Yup.boolean().oneOf([true], \"You must accept the terms and conditions\").required()\r\n    });\r\n\r\n\r\n    const handleConfirmPassword=()=>{\r\n        if (confirmType === \"password\") {\r\n            setConfirmType(\"text\")\r\n        } else {\r\n            setConfirmType(\"password\")\r\n        }\r\n    }\r\n\r\n    const onSubmit=(fields, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        dispatch(addRestaurantData(fields));\r\n        props.onClose();\r\n        resetForm();\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Add  Restaurant\r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik enableReinitialize={true} initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} >\r\n                        {({ errors, touched,values, isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Restaurant Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Contact Name</CLabel>\r\n                                            <Field name=\"contactName\" placeholder=\"Enter here\" className={`form-control ${touched.contactName && errors.contactName?\"is-invalid\": touched.contactName && !errors.contactName?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.contactName}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Company Name</CLabel>\r\n                                            <Field name=\"company\" placeholder=\"Enter here\" className={`form-control ${touched.company && errors.company?\"is-invalid\": touched.company && !errors.company?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.company}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        \r\n                                        <CRow>\r\n                                            <CCol xs=\"6\">\r\n                                                <CFormGroup >\r\n                                                    <CLabel >Email</CLabel>\r\n                                                    <Field type=\"email\" name=\"email\" placeholder=\"Enter here\" className={`form-control ${touched.email && errors.email?\"is-invalid\": touched.email && !errors.email?\"is-valid\":null}`} />\r\n                                                    <CInvalidFeedback className=\"help-block\">{errors.email}</CInvalidFeedback>\r\n                                                </CFormGroup> \r\n                                            </CCol>\r\n                                            <CCol>\r\n                                                <CFormGroup >\r\n                                                    <CLabel >Password</CLabel>\r\n                                                    <CInputGroup>\r\n                                                        <Field type={confirmType} name=\"password\" placeholder=\"Enter here\" className={`form-control ${touched.password && errors.password?\"is-invalid\": touched.password && !errors.password?\"is-valid\":null}`} />\r\n                                                        <CInputGroupAppend>\r\n                                                            <CInputGroupText type=\"button\" color=\"light\" onClick={handleConfirmPassword}>\r\n                                                                {confirmType=== \"password\"?\r\n                                                                    <img src={'images/visibility_1.png'}  width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                                :\r\n                                                                    <img src={'images/visibility_2.png'} width=\"15px\" className=\"img-fluid\" alt=\"showpassword\" />\r\n                                                                }\r\n                                                            </CInputGroupText>\r\n                                                        </CInputGroupAppend>\r\n                                                        <CInvalidFeedback className=\"help-block\">{errors.password}</CInvalidFeedback>\r\n                                                    </CInputGroup>\r\n                                                </CFormGroup>\r\n                                            </CCol>\r\n                                        </CRow>\r\n                                        <CFormGroup >\r\n                                            <CLabel >Phone Number</CLabel>\r\n                                            <Field name=\"phoneNumber\" placeholder=\"Enter here\" className={`form-control ${touched.phoneNumber && errors.phoneNumber?\"is-invalid\": touched.phoneNumber && !errors.phoneNumber?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.phoneNumber}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                    \r\n                                        <CRow>\r\n                                            <CCol xs=\"6\">\r\n                                                <CFormGroup>\r\n                                                    <CLabel>Packages</CLabel>\r\n                                                    <Field as=\"select\" name=\"package\" className={`text-capitalize form-control ${touched.package && errors.package?\"is-invalid\": touched.package && !errors.package?\"is-valid\":null}`}>\r\n                                                        <option value=\"\">Select</option>\r\n                                                        {packages && packages.map((data, index)=>{\r\n                                                            return(\r\n                                                                <React.Fragment key={index}>\r\n                                                                    <option className=\"text-capitalize\" value={data}>{data}</option>\r\n                                                                </React.Fragment>\r\n                                                            )\r\n                                                        })}\r\n                                                    </Field>\r\n                                                    <CInvalidFeedback className=\"help-block\">{errors.package}</CInvalidFeedback>\r\n                                                </CFormGroup>\r\n                                            </CCol>\r\n                                            <CCol xs=\"6\">\r\n                                                <CFormGroup>\r\n                                                    <CLabel>Role</CLabel>\r\n                                                    <Field as=\"select\" name=\"role\" className={`text-capitalize form-control ${touched.role && errors.role?\"is-invalid\": touched.role && !errors.role?\"is-valid\":null}`}>\r\n                                                        <option value=\"\">Select</option>\r\n                                                        {roles && roles.map((data, index)=>{\r\n                                                            return(\r\n                                                                <React.Fragment key={index}>\r\n                                                                    <option className=\"text-capitalize\" value={data}>{data}</option>\r\n                                                                </React.Fragment>\r\n                                                            )\r\n                                                        })}\r\n                                                    </Field>\r\n                                                    <CInvalidFeedback className=\"help-block\">{errors.role}</CInvalidFeedback>\r\n                                                </CFormGroup>\r\n                                            </CCol>   \r\n                                        </CRow>\r\n                                        \r\n                                        <CFormGroup>\r\n                                            <Field type=\"checkbox\" name=\"isAgreeToTerms\"  className={`pb-4 mr-2 ${ errors.isAgreeToTerms?\"is-invalid\": !errors.isAgreeToTerms?\"is-valid\":null}`}/>\r\n                                            <CLabel variant=\"checkbox\" className=\"form-check-label\" >I accept the terms of use</CLabel>\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.isAgreeToTerms}</CInvalidFeedback>\r\n                                        </CFormGroup>\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={props.onClose}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\">ADD</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddRestaurantModalComp;","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageRestaurantPage\\DeleteRestaurantModalComp.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageRestaurantAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\reusable\\index.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageUsersAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\charts\\MainChartExample.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdownNotif.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdownMssg.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\containers\\TheHeaderDropdown.js",["590"],"import React from 'react'\nimport {\n  CBadge,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CImg\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { logoutUser } from '../redux/actions/generalActions'\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from 'react-router-dom';\n\nconst TheHeaderDropdown = () => {\n\n  const dispatch = useDispatch();\n  const history=useHistory();\n  const handleLogout=()=>{\n    dispatch(logoutUser(history))\n  \n  }\n  return (\n    <CDropdown\n      inNav\n      className=\"c-header-nav-items mx-2\"\n      direction=\"down\"\n    >\n      <CDropdownToggle className=\"c-header-nav-link\" caret={false}>\n        <div className=\"c-avatar\">\n          <CImg\n            src={'avatars/6.jpg'}\n            className=\"c-avatar-img\"\n            alt=\"admin@bootstrapmaster.com\"\n          />\n        </div>\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownItem\n          header\n          tag=\"div\"\n          color=\"light\"\n          className=\"text-center\"\n        >\n          <strong>Account</strong>\n        </CDropdownItem>\n        {/* <CDropdownItem>\n          <CIcon name=\"cil-bell\" className=\"mfe-2\" />\n          Updates\n          <CBadge color=\"info\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-envelope-open\" className=\"mfe-2\" />\n          Messages\n          <CBadge color=\"success\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-task\" className=\"mfe-2\" />\n          Tasks\n          <CBadge color=\"danger\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-comment-square\" className=\"mfe-2\" />\n          Comments\n          <CBadge color=\"warning\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem\n          header\n          tag=\"div\"\n          color=\"light\"\n          className=\"text-center\"\n        >\n          <strong>Settings</strong>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-user\" className=\"mfe-2\" />Profile\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-settings\" className=\"mfe-2\" />\n          Settings\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-credit-card\" className=\"mfe-2\" />\n          Payments\n          <CBadge color=\"secondary\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem>\n        <CDropdownItem>\n          <CIcon name=\"cil-file\" className=\"mfe-2\" />\n          Projects\n          <CBadge color=\"primary\" className=\"mfs-auto\">42</CBadge>\n        </CDropdownItem> */}\n        <CDropdownItem divider />\n        <CDropdownItem onClick={handleLogout}>\n          <CIcon name=\"cil-lock-locked\" className=\"mfe-2\" />\n          LogOut\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default TheHeaderDropdown\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\reusable\\DocsLink.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\alertReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\alertAction.js",["591"],"import Axios from './axios';\r\nimport {v4} from 'uuid';\r\n\r\n\r\nexport const setAlert=(message,color)=>{\r\n    let id = v4();\r\n    return async(dispatch)=>{\r\n      try {\r\n        await dispatch({type : \"SET_ALERT\" , payload : {message , color, id}});\r\n        setTimeout(() => {\r\n             dispatch({type : \"REMOVE_ALERT\" , payload: {id}});\r\n          } , 6000);\r\n      }\r\n      catch (error) {\r\n          console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n ","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\AlertSystemPage\\AlertSystemPage.js",["592","593"],"import React,{setState, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\n\r\n\r\nconst AlertSystemPage=()=>{\r\n\r\n    let alertInfo = useSelector((state) => {\r\n        return state.alert;\r\n    });\r\n\r\n    \r\n    return(\r\n        <>\r\n        <section >\r\n            {\r\n                alertInfo.length > 0 ?\r\n                    <React.Fragment>\r\n                        {\r\n                            alertInfo.map(alert => {\r\n                                return (\r\n                                    <React.Fragment key={alert.id}>\r\n                                        <div  className={`alert bg-${alert.color} alert-dismissible animated slideInDown fixed-top m-3`}  style={{width:'max-content',left:'unset'}}>\r\n                                            <button className=\"close\">\r\n                                                <i className=\"fa fa-times-circle\"/>\r\n                                            </button>\r\n                                            <p className=\" mb-0 text-white\" style={{fontSize:16}}>{alert.message}</p>\r\n                                        </div>\r\n                                        {/* <div class={`alert alert-${alert.color} alert-dismissible fade show`} role=\"alert\">\r\n                                            <strong>{alert.message}</strong> \r\n                                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n                                        </div> */}\r\n                                       \r\n                                    </React.Fragment>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                         \r\n                    </React.Fragment> : null\r\n            }\r\n           \r\n        </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AlertSystemPage;","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\ManageAllergenPage.js",["594","595","596","597","598","599"],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\AddAllergyComponent.js",["600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CFormGroup,CLabel,CRow,CCol,CInvalidFeedback,CCardFooter,\r\n    CModalHeader,CModalTitle,CModalBody ,CInputGroupAppend,CInputGroup,CInputGroupText} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addAllergyData } from \"../../../redux/actions/manageAllergyAction\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst phoneRegex = RegExp( /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst AddAllergyComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    const [imageloading,setImageloading]=useState(false);\r\n\r\n    \r\n    const initialValues = {\r\n        name:'',\r\n        image:null,\r\n        description:'',\r\n    }\r\n    const validationSchema  = Yup.object().shape({\r\n        name:Yup.string().required(' Name is required'),\r\n        image:Yup.mixed().required('Please Upload Image'),\r\n        description:Yup.string().required('Description is required'),\r\n    });\r\n\r\n    \r\n    const onSubmit=(fields, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        dispatch(addAllergyData(fields,props.perPage,props.myPage,props.inputValue));\r\n        props.onClose();\r\n        resetForm();\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Add  Allergy || \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik enableReinitialize={true} initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} >\r\n                        {({ errors, touched,values,setSubmitting , isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Allergy Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Allergy Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Allergy Image</CLabel>\r\n                                            <UploadComponent setFieldValue={setFieldValue} setSubmitting={setSubmitting} className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`}/>\r\n                                            <small className=\"text-danger  mt-1\">{(touched.image && errors.image && errors.image) }</small>\r\n                                            {values.image &&\r\n                                             <div className=\"d-flex justify-content-center align-items-center p-3\">\r\n                                                    <img src={URL.createObjectURL(values.image)} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                            </div>\r\n                                              }\r\n                                        </CFormGroup> \r\n\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose()}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" disabled={isSubmitting}>ADD</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddAllergyComponent;\r\n\r\n\r\nconst UploadComponent = props => {\r\n    const dispatch=useDispatch();\r\n    const { setFieldValue ,setSubmitting} = props;\r\n\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      accept: \"image/*\",\r\n      onDrop: acceptedFiles => {\r\n          setFieldValue(\"image\", acceptedFiles[0]);\r\n      }\r\n    });\r\n    \r\n\r\n    return (\r\n      <div className=\"border bg-primary\" type=\"button\">\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          {isDragActive ? (\r\n            <p>Drop the files here ...</p>\r\n          ) : (\r\n            <div className=\"d-flex justify-content-center align-items-center p-2\">\r\n              <img src={'images/upload.svg'}  width=\"30px\" className=\"img-fluid mr-4\" alt=\"showpassword\" />\r\n              <p className=\"text-white m-0\">Click to Upload Image</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\DeleteAllergyComponent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageAllergenPage\\UpdateAllergyComponent.js",["617","618","619","620","621","622","623","624","625","626","627"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup} from '@coreui/react';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\nimport { getSelectedAllergyData, updateSelectedAllergy } from \"../../../redux/actions/manageAllergyAction\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\n\r\n\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/);\r\n\r\nconst UpdateAllergyComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    \r\n    useEffect(()=>{\r\n        if (props.show) {\r\n            dispatch(getSelectedAllergyData(props.selectedid));\r\n        }\r\n    },[dispatch,props.show,props.selectedid]);\r\n\r\n    let selectedAllergyData = useSelector((state)=>{\r\n        return state.allergy.selectedAllergy\r\n    });\r\n\r\n    const initialValues = {\r\n        name:selectedAllergyData&&selectedAllergyData.name,\r\n        image:selectedAllergyData&&selectedAllergyData.image,\r\n        description:selectedAllergyData&&selectedAllergyData.description,\r\n       \r\n    }\r\n    const validationSchemaForm  = Yup.object().shape({\r\n        name:Yup.string().required('Allergy Name is required'),\r\n        image:Yup.string().required('Allergy Image is required'),\r\n        description:Yup.string().required('Allergy Description is required'),\r\n    });\r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            name: input.name,\r\n            image:input.image,\r\n            description:input.description,\r\n        }\r\n        dispatch(updateSelectedAllergy(props.selectedid,obj,props.imagepath,props.perPage,props.myPage,props.inputValue));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update Allergy Data \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors, touched,values, setSubmitting , isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                    <CFormGroup >\r\n                                            <CLabel >Allergy Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Allergy Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Allergy Image</CLabel>\r\n                                            <Field name=\"image\" placeholder=\"Enter here\" className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.image}</CInvalidFeedback>\r\n                                        </CFormGroup> */}\r\n                                        <CFormGroup >\r\n                                            <CLabel >Allergy Image</CLabel>\r\n                                            <UploadComponent setFieldValue={setFieldValue} setSubmitting={setSubmitting} className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`}/>\r\n                                            <small className=\"text-danger  mt-1\">{(touched.image && errors.image && errors.image) }</small>\r\n                                            {values.image &&\r\n                                             <div className=\"d-flex justify-content-center align-items-center p-3\">\r\n                                               {typeof values.image === 'string' || values.image instanceof String ?\r\n                                                    <img src={`${props.imagelink}${values.image}`} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                                    :\r\n                                                    <img src={URL.createObjectURL(values.image)} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                            }\r\n                                            </div>\r\n                                              }\r\n                                        </CFormGroup>\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" disabled={isSubmitting}>Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateAllergyComponent;\r\n\r\n\r\n\r\nconst UploadComponent = props => {\r\n    const dispatch=useDispatch();\r\n    const { setFieldValue ,setSubmitting} = props;\r\n\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      accept: \"image/*\",\r\n      onDrop: acceptedFiles => {\r\n          setFieldValue(\"image\", acceptedFiles[0]);\r\n      }\r\n    });\r\n    \r\n\r\n    return (\r\n      <div className=\"border bg-primary\" type=\"button\">\r\n        {}\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          {isDragActive ? (\r\n            <p>Drop the files here ...</p>\r\n          ) : (\r\n            <div className=\"d-flex justify-content-center align-items-center p-2\">\r\n              <img src={'images/upload.svg'}  width=\"30px\" className=\"img-fluid mr-4\" alt=\"showpassword\" />\r\n              <p className=\"text-white m-0\">Click to Upload Image</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageAllergyReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageAllergyAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageDietaryReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageCuisineReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageLifeStyleReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\ManageDietaryPage.js",["628","629"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CCard,CCardBody,CCardHeader,CCol,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport DeleteDietaryComponent from './DeleteDietaryComponent';\r\nimport AddDietaryComponent from './AddDietaryComponent';\r\nimport UpdateDietaryComponent from './UpdateDietaryComponent';\r\nimport { getAllDietaryData } from '../../../redux/actions/manageDietaryAction';\r\n\r\n\r\n\r\nconst ManageDietaryPage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [addDietaryModalShow, setAddDietaryModalShow] = useState(false);\r\n    const [updateDietaryModalShow, setUpdateDietaryModalShow] = useState(false);\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllDietaryData({start:0,search:inputValue}));\r\n    // },[dispatch,inputValue]);\r\n\r\n    // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllDietaryData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllDietaryData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllDietaryData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n    let allDietary_data = useSelector((state)=>{\r\n        return state.dietary\r\n    });\r\n\r\n    let {isLoading,dietary_Data,totalrows}=allDietary_data;\r\n\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'name',name: 'Name',  },\r\n      // { selector: 'description',name: 'Description', sortable: true},\r\n     { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn-group\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateDietaryModalShow(true);setSelectedId(row._id);}}>Update</CDropdownItem>\r\n            <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id);}}>Delete</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n    ];\r\n   \r\n    \r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manage Dietary \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\"  className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" onClick={() => {setAddDietaryModalShow(true);setSelectedId(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add Dietary\r\n                  </span>  \r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                <AddDietaryComponent \r\n                  show={addDietaryModalShow} onClose={() => setAddDietaryModalShow(false)} \r\n                  perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n                />\r\n              </div>\r\n            </CRow>\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            dietary_Data.dietaryList && dietary_Data.dietaryList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={dietary_Data.dietaryList}\r\n                                highlightOnHover\r\n                                noHeader\r\n                                overflowY\r\n                                striped\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(dietary_Data.dietaryList)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdateDietaryComponent \r\n          show={updateDietaryModalShow} onClose={() => setUpdateDietaryModalShow(false)} \r\n          selectedid={selectedId} \r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      <DeleteDietaryComponent \r\n        show={deleteModalShow} onClose={() => setDeleteModalShow(false)} \r\n        selectedid={selectedId} \r\n        perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n      />\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageDietaryPage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\DeleteDietaryComponent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\AddDietaryComponent.js",["630","631","632","633","634","635","636","637"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CFormGroup,CLabel,CInvalidFeedback,CCardFooter,\r\n    CModalHeader,CModalTitle,CModalBody} from '@coreui/react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addDietaryData } from \"../../../redux/actions/manageDietaryAction\";\r\n\r\nconst phoneRegex = RegExp( /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst AddDietaryComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n\r\n   \r\n    const initialValues = {\r\n        name:'',\r\n        // description:'',\r\n       \r\n    }\r\n\r\n    const validationSchema  = Yup.object().shape({\r\n        name:Yup.string().required(' Name is required'),\r\n        // description:Yup.string().required('Description is required'),\r\n    });\r\n\r\n    \r\n    const onSubmit=(fields, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        dispatch(addDietaryData(fields));\r\n        props.onClose();\r\n        resetForm();\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Add  Dietary || \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik enableReinitialize={true} initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} >\r\n                        {({ errors, touched,values, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Dietary Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Dietary Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup>  */}\r\n                                    </div>\r\n\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" >ADD</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </CModalBody>\r\n            </CModal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddDietaryComponent;\r\n\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageDietaryPage\\UpdateDietaryComponent.js",["638","639","640","641","642","643","644","645","646","647","648"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup} from '@coreui/react';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\nimport { getSelectedDietaryData, updateSelectedDietary } from \"../../../redux/actions/manageDietaryAction\";\r\n\r\n\r\n\r\nconst packages = [\"basic\",\"standard\",\"premiun\"];\r\nconst roles=[\"restaurant_admin\"]\r\n\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/);\r\n\r\nconst UpdateDietaryComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    \r\n    useEffect(()=>{\r\n        if (props.show) {\r\n            dispatch(getSelectedDietaryData(props.selectedid));\r\n        }\r\n    },[dispatch,props.show,props.selectedid]);\r\n\r\n    let selectedDietaryData = useSelector((state)=>{\r\n        return state.dietary.selectedDietary\r\n    });\r\n  const validationSchemaForm  = Yup.object().shape({\r\n        name:Yup.string().required('Dietary Name is required'),\r\n        // description:Yup.string().required('Dietary Description is required'),\r\n    });\r\n\r\n    const initialValues = {\r\n        name:selectedDietaryData&&selectedDietaryData.name,\r\n        // description:selectedDietaryData&&selectedDietaryData.description,\r\n       \r\n    }\r\n  \r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            name: input.name,\r\n            // description:input.description,\r\n        }\r\n        dispatch(updateSelectedDietary(props.selectedid,obj));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update Dietary Data \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors, touched,values, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                    <CFormGroup >\r\n                                            <CLabel >Dietary Name</CLabel>\r\n                                            <Field name=\"name\" defaultValue='' placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Dietary Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup>  */}\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" >Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateDietaryComponent;\r\n\r\n\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageDietaryAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageLifestyleReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\ManageLifestylePage.js",["649","650","651"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CCard,CCardBody,CCardHeader,CCol,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport DeleteLifestyleComponent from './DeleteLifestyleComponent';\r\nimport AddLifestyleComponent from './AddLifestyleComponent';\r\nimport UpdateLifestyleComponent from './UpdateLifestyleComponent';\r\nimport { getAllLifestyleData } from '../../../redux/actions/manageLifestyleAction';\r\nimport moment from \"moment\";\r\n\r\n\r\nconst ManageLifestylePage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [addLifestyleModalShow, setAddLifestyleModalShow] = useState(false);\r\n    const [updateLifestyleModalShow, setUpdateLifestyleModalShow] = useState(false);\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllLifestyleData({start:0,search:inputValue}));\r\n    // },[dispatch,inputValue]);\r\n\r\n    // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllLifestyleData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllLifestyleData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllLifestyleData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n    let allLifestyle_data = useSelector((state)=>{\r\n        return state.lifestyle\r\n    });\r\n\r\n    let {isLoading,lifestyle_Data,totalrows}=allLifestyle_data;\r\n\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'name',name: 'Name',  },\r\n      // { selector: 'description',name: 'Description', sortable: true},\r\n      // { selector: 'updatedAt', name: 'Updated At', cell:(row)=><span>{moment(row.updatedAt).format(\" Do MMMM, YYYY\")}</span>  },\r\n\r\n     { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn-group\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateLifestyleModalShow(true);setSelectedId(row._id);}}>Update</CDropdownItem>\r\n            <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id);}}>Delete</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n    ];\r\n    \r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manage Lifestyle \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\" className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" onClick={() => {setAddLifestyleModalShow(true);setSelectedId(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add Lifestyle\r\n                  </span> \r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                <AddLifestyleComponent \r\n                  show={addLifestyleModalShow} onClose={() => setAddLifestyleModalShow(false)} \r\n                  perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n                />\r\n              </div>\r\n            </CRow>\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            lifestyle_Data.lifestyleList && lifestyle_Data.lifestyleList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={lifestyle_Data.lifestyleList}\r\n                                highlightOnHover\r\n                                noHeader\r\n                                overflowY\r\n                                striped\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(lifestyle_Data.lifestyleList)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdateLifestyleComponent \r\n          show={updateLifestyleModalShow} onClose={() => setUpdateLifestyleModalShow(false)} \r\n          selectedid={selectedId} \r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      <DeleteLifestyleComponent \r\n        show={deleteModalShow} onClose={() => setDeleteModalShow(false)} \r\n        selectedid={selectedId} \r\n        perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n      />\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageLifestylePage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\DeleteLifestyleComponent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\UpdateLifestyleComponent.js",["652","653","654","655","656","657","658","659","660","661","662"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup} from '@coreui/react';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\nimport { getSelectedLifestyleData, updateSelectedLifestyle } from \"../../../redux/actions/manageLifestyleAction\";\r\n\r\n\r\n\r\nconst packages = [\"basic\",\"standard\",\"premiun\"];\r\nconst roles=[\"restaurant_admin\"]\r\n\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/);\r\n\r\nconst UpdateLifestyleComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    \r\n    useEffect(()=>{\r\n        if (props.show) {\r\n            dispatch(getSelectedLifestyleData(props.selectedid));\r\n        }\r\n    },[dispatch,props.show,props.selectedid]);\r\n\r\n    let selectedLifestyleData = useSelector((state)=>{\r\n        return state.lifestyle.selectedLifestyle\r\n    });\r\n\r\n    const initialValues = {\r\n        name:selectedLifestyleData&&selectedLifestyleData.name,\r\n        // description:selectedLifestyleData&&selectedLifestyleData.description,\r\n       \r\n    }\r\n    const validationSchemaForm  = Yup.object().shape({\r\n        name:Yup.string().required('Lifestyle Name is required'),\r\n        // description:Yup.string().required('Lifestyle Description is required'),\r\n    });\r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            name: input.name,\r\n            // description:input.description,\r\n        }\r\n        dispatch(updateSelectedLifestyle(props.selectedid,obj));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update Lifestyle Data \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors, touched,values, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                    <CFormGroup >\r\n                                            <CLabel >Lifestyle Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Lifestyle Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup>  */}\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" >Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateLifestyleComponent;\r\n\r\n\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageLifestylePage\\AddLifestyleComponent.js",["663","664","665","666","667","668","669","670"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CFormGroup,CLabel,CInvalidFeedback,CCardFooter,\r\n    CModalHeader,CModalTitle,CModalBody} from '@coreui/react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addLifestyleData } from \"../../../redux/actions/manageLifestyleAction\";\r\n\r\nconst phoneRegex = RegExp( /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst AddLifestyleComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n\r\n   \r\n    const initialValues = {\r\n        name:'',\r\n        // description:'',\r\n       \r\n    }\r\n\r\n    const validationSchema  = Yup.object().shape({\r\n        name:Yup.string().required(' Name is required'),\r\n        // description:Yup.string().required('Description is required'),\r\n    });\r\n\r\n    \r\n    const onSubmit=(fields, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        dispatch(addLifestyleData(fields));\r\n        props.onClose();\r\n        resetForm();\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Add  Lifestyle || \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik enableReinitialize={true} initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} >\r\n                        {({ errors, touched,values, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Lifestyle Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Lifestyle Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup>  */}\r\n                                    </div>\r\n\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" >ADD</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </CModalBody>\r\n            </CModal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddLifestyleComponent;\r\n\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageLifestyleAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\ManageCuisinePage.js",["671","672","673"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CCard,CCardBody,CCardHeader,CCol,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport DeleteCuisineComponent from './DeleteCuisineComponent';\r\nimport AddCuisineComponent from './AddCuisineComponent';\r\nimport UpdateCuisineComponent from './UpdateCuisineComponent';\r\nimport { getAllCuisineData } from '../../../redux/actions/manageCuisineAction';\r\nimport moment from \"moment\";\r\n\r\n\r\nconst ManageCuisinePage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [addCuisineModalShow, setAddCuisineModalShow] = useState(false);\r\n    const [updateCuisineModalShow, setUpdateCuisineModalShow] = useState(false);\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllCuisineData({start:0,search:inputValue}));\r\n    // },[dispatch,inputValue]);\r\n\r\n    // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllCuisineData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllCuisineData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllCuisineData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n    let allCuisine_data = useSelector((state)=>{\r\n        return state.cuisine\r\n    });\r\n    let {isLoading,cuisine_Data,totalrows}=allCuisine_data;\r\n\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'name',name: 'Name',  },\r\n      // { selector: 'description',name: 'Description', sortable: true},\r\n      // { selector: 'updatedAt', name: 'Updated At', cell:(row)=><span>{moment(row.updatedAt).format(\" Do MMMM, YYYY\")}</span>  },\r\n\r\n     { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn-group\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateCuisineModalShow(true);setSelectedId(row._id);}}>Update</CDropdownItem>\r\n            <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id);}}>Delete</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n    ];\r\n    \r\n    \r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manage Cuisine \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\"  className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" onClick={() => {setAddCuisineModalShow(true);setSelectedId(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add Cuisine\r\n                  </span>   \r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                <AddCuisineComponent \r\n                  show={addCuisineModalShow} onClose={() => setAddCuisineModalShow(false)} \r\n                  perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n                />\r\n              </div>\r\n            </CRow>\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            cuisine_Data.cuisineTypeList && cuisine_Data.cuisineTypeList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={cuisine_Data.cuisineTypeList}\r\n                                highlightOnHover\r\n                                noHeader\r\n                                overflowY\r\n                                striped\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(cuisine_Data.cuisineTypeList)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdateCuisineComponent \r\n          show={updateCuisineModalShow} onClose={() => setUpdateCuisineModalShow(false)} \r\n          selectedid={selectedId} \r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      <DeleteCuisineComponent \r\n        show={deleteModalShow} onClose={() => setDeleteModalShow(false)} \r\n        selectedid={selectedId}\r\n        perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n      />\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageCuisinePage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\AddCuisineComponent.js",["674","675","676","677","678","679","680","681"],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\DeleteCuisineComponent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCuisinePage\\UpdateCuisineComponent.js",["682","683","684","685","686","687","688","689","690","691","692"],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageCuisineAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageFeaturesReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\ManageFeaturesPage.js",["693","694","695","696","697","698"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CBadge,CCard,CCardBody,CCardHeader,CCol,CDataTable,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable, { defaultThemes }from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport moment from \"moment\";\r\nimport DeleteFeaturesComponent from './DeleteFeaturesComponent';\r\nimport AddFeaturesComponent from './AddFeaturesComponent';\r\nimport UpdateFeaturesComponent from './UpdateFeaturesComponent';\r\nimport { getAllFeaturesData } from '../../../redux/actions/manageFeaturesAction';\r\n\r\nconst CustomDesc = ({ row }) => (\r\n  <div>\r\n    {}\r\n    <div>\r\n      <div data-tag=\"allowRowEvents\" style={{ overflow: 'hidden', whiteSpace: 'wrap', textOverflow: 'ellipses' }}>\r\n        {}\r\n        {row.description}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst ManageAllergenPage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [addFeaturesModalShow, setAddFeaturesModalShow] = useState(false);\r\n    const [updateFeaturesModalShow, setUpdateFeaturesModalShow] = useState(false);\r\n    const [imagePath, seImagePath] = useState(\"\");\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // const imagelink=\"http://192.168.100.39:8000/\"\r\n    const imagelink=\"https://pickypigsapi.herokuapp.com/\"\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllFeaturesData({start:0,search:inputValue}));\r\n    // },[dispatch,inputValue]);\r\n\r\n    // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllFeaturesData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllFeaturesData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllFeaturesData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n    let allFeatures_data = useSelector((state)=>{\r\n        return state.features\r\n    });\r\n\r\n    let {isLoading,features_Data,totalrows}=allFeatures_data;\r\n\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'name',name: 'Name',  },\r\n      {\r\n        name: 'Thumbnail',\r\n        cell: row => <img height=\"40px\" className=\"border m-2\" width=\"40px\" alt={row.name} src={`${imagelink}${row.image}`} />,\r\n      },\r\n      { selector: 'description',name: 'Description', allowOverflow:false,cell: row => <CustomDesc row={row} />,},\r\n     { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn-group\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateFeaturesModalShow(true);setSelectedId(row._id);seImagePath(row.image)}}>Update</CDropdownItem>\r\n            <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id);seImagePath(row.image)}}>Delete</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n    ];\r\n\r\n    \r\n    \r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manage Restaurant Features  \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\" className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" onClick={() => {setAddFeaturesModalShow(true);setSelectedId(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add Restaurant Features\r\n                  </span> \r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                <AddFeaturesComponent show={addFeaturesModalShow} onClose={() => setAddFeaturesModalShow(false)} \r\n                  imagelink={imagelink} \r\n                  perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n                />\r\n              </div>\r\n            </CRow>\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            features_Data.restaurantFeatureList && features_Data.restaurantFeatureList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={features_Data.restaurantFeatureList}\r\n                                highlightOnHover\r\n                                noHeader\r\n                                overflowY\r\n                                striped\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(features_Data.restaurantFeatureList)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdateFeaturesComponent show={updateFeaturesModalShow} onClose={() => setUpdateFeaturesModalShow(false)}\r\n          electedid={selectedId} imagelink={imagelink} imagepath={imagePath}\r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      <DeleteFeaturesComponent show={deleteModalShow} onClose={() => setDeleteModalShow(false)}\r\n        selectedid={selectedId} imagepath={imagePath} \r\n        perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n      />\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageAllergenPage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\AddFeaturesComponent.js",["699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CFormGroup,CLabel,CRow,CCol,CInvalidFeedback,CCardFooter,\r\n    CModalHeader,CModalTitle,CModalBody ,CInputGroupAppend,CInputGroup,CInputGroupText} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addFeaturesData } from \"../../../redux/actions/manageFeaturesAction\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst phoneRegex = RegExp( /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst AddFeaturesComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    const [imageloading,setImageloading]=useState(false);\r\n\r\n    \r\n    const initialValues = {\r\n        name:'',\r\n        image:null,\r\n        description:'',\r\n       \r\n    }\r\n\r\n    const validationSchema  = Yup.object().shape({\r\n        name:Yup.string().required(' Name is required'),\r\n        image:Yup.mixed().required('Please Upload Image'),\r\n        description:Yup.string().required('Description is required'),\r\n    });\r\n\r\n    \r\n    const onSubmit=(fields, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        dispatch(addFeaturesData(fields));\r\n        props.onClose();\r\n        resetForm();\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Add  Features || \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik enableReinitialize={true} initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} >\r\n                        {({ errors, touched,values,setSubmitting , isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Features Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Features Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Features Image</CLabel>\r\n                                            <UploadComponent setFieldValue={setFieldValue} setSubmitting={setSubmitting} className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`}/>\r\n                                            <small className=\"text-danger  mt-1\">{(touched.image && errors.image && errors.image) }</small>\r\n                                            {values.image &&\r\n                                             <div className=\"d-flex justify-content-center align-items-center p-3\">\r\n                                                    <img src={URL.createObjectURL(values.image)} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                            </div>\r\n                                              }\r\n                                        </CFormGroup> \r\n\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose()}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" disabled={isSubmitting}>ADD</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddFeaturesComponent;\r\n\r\n\r\nconst UploadComponent = props => {\r\n    const dispatch=useDispatch();\r\n    const { setFieldValue ,setSubmitting} = props;\r\n\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      accept: \"image/*\",\r\n      onDrop: acceptedFiles => {\r\n          setFieldValue(\"image\", acceptedFiles[0]);\r\n      }\r\n    });\r\n    \r\n\r\n    return (\r\n      <div className=\"border bg-primary\" type=\"button\">\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          {isDragActive ? (\r\n            <p>Drop the files here ...</p>\r\n          ) : (\r\n            <div className=\"d-flex justify-content-center align-items-center p-2\">\r\n              <img src={'images/upload.svg'}  width=\"30px\" className=\"img-fluid mr-4\" alt=\"showpassword\" />\r\n              <p className=\"text-white m-0\">Click to Upload Image</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\DeleteFeaturesComponent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageFeaturesPage\\UpdateFeaturesComponent.js",["716","717","718","719","720","721","722","723","724","725","726"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup} from '@coreui/react';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\nimport { getSelectedFeaturesData, updateSelectedFeatures } from \"../../../redux/actions/manageFeaturesAction\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\n\r\n\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/);\r\n\r\nconst UpdateFeaturesComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    \r\n    useEffect(()=>{\r\n        if (props.show) {\r\n            dispatch(getSelectedFeaturesData(props.selectedid));\r\n        }\r\n    },[dispatch,props.show,props.selectedid]);\r\n\r\n    let selectedFeaturesData = useSelector((state)=>{\r\n        return state.features.selectedFeatures\r\n    });\r\n\r\n    const initialValues = {\r\n        name:selectedFeaturesData&&selectedFeaturesData.name,\r\n        image:selectedFeaturesData&&selectedFeaturesData.image,\r\n        description:selectedFeaturesData&&selectedFeaturesData.description,\r\n       \r\n    }\r\n    const validationSchemaForm  = Yup.object().shape({\r\n        name:Yup.string().required('Features Name is required'),\r\n        image:Yup.string().required('Features Image is required'),\r\n        description:Yup.string().required('Features Description is required'),\r\n    });\r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            name: input.name,\r\n            image:input.image,\r\n            description:input.description,\r\n        }\r\n        dispatch(updateSelectedFeatures(props.selectedid,obj,props.imagepath));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update Features Data \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors, touched,values, setSubmitting , isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                    <CFormGroup >\r\n                                            <CLabel >Features Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        <CFormGroup >\r\n                                            <CLabel >Features Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Features Image</CLabel>\r\n                                            <Field name=\"image\" placeholder=\"Enter here\" className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.image}</CInvalidFeedback>\r\n                                        </CFormGroup> */}\r\n                                        <CFormGroup >\r\n                                            <CLabel >Features Image</CLabel>\r\n                                            <UploadComponent setFieldValue={setFieldValue} setSubmitting={setSubmitting} className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`}/>\r\n                                            <small className=\"text-danger  mt-1\">{(touched.image && errors.image && errors.image) }</small>\r\n                                            {values.image &&\r\n                                             <div className=\"d-flex justify-content-center align-items-center p-3\">\r\n                                               {typeof values.image === 'string' || values.image instanceof String ?\r\n                                                    <img src={`${props.imagelink}${values.image}`} width=\"160px\" height=\"100px\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                                    :\r\n                                                    <img src={URL.createObjectURL(values.image)} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                            }\r\n                                            </div>\r\n                                              }\r\n                                        </CFormGroup>\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" disabled={isSubmitting}>Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateFeaturesComponent;\r\n\r\n\r\n\r\nconst UploadComponent = props => {\r\n    const dispatch=useDispatch();\r\n    const { setFieldValue ,setSubmitting} = props;\r\n\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      accept: \"image/*\",\r\n      onDrop: acceptedFiles => {\r\n          setFieldValue(\"image\", acceptedFiles[0]);\r\n      }\r\n    });\r\n    \r\n\r\n    return (\r\n      <div className=\"border bg-primary\" type=\"button\">\r\n        {}\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          {isDragActive ? (\r\n            <p>Drop the files here ...</p>\r\n          ) : (\r\n            <div className=\"d-flex justify-content-center align-items-center p-2\">\r\n              <img src={'images/upload.svg'}  width=\"30px\" className=\"img-fluid mr-4\" alt=\"showpassword\" />\r\n              <p className=\"text-white m-0\">Click to Upload Image</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageFeaturesAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\reducers\\manageCookingReducer.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\ManageCookingPage.js",["727","728","729","730","731","732"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport {CBadge,CCard,CCardBody,CCardHeader,CCol,CDataTable,CButton,CRow,CDropdownMenu,CDropdownItem,CDropdown,CDropdownToggle} from '@coreui/react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DataTable, { defaultThemes }from 'react-data-table-component';\r\nimport CIcon from '@coreui/icons-react'\r\nimport moment from \"moment\";\r\nimport DeleteCookingComponent from './DeleteCookingComponent';\r\nimport AddCookingComponent from './AddCookingComponent';\r\nimport UpdateCookingComponent from './UpdateCookingComponent';\r\nimport { getAllCookingData } from '../../../redux/actions/manageCookingAction';\r\n\r\n\r\nconst ManageAllergenPage = () => {\r\n    const dispatch=useDispatch();  \r\n    const history = useHistory();\r\n    const [inputValue,setInputValue]=useState(\"\");\r\n    const [deleteModalShow, setDeleteModalShow] = useState(false);\r\n    const [selectedId,setSelectedId]=useState('')\r\n    const [addCookingModalShow, setAddCookingModalShow] = useState(false);\r\n    const [updateCookingModalShow, setUpdateCookingModalShow] = useState(false);\r\n    const [imagePath, seImagePath] = useState(\"\");\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [myPage, setMypage] = useState(1);\r\n\r\n    // const imagelink=\"http://192.168.100.39:8000/\"\r\n    const imagelink=\"https://pickypigsapi.herokuapp.com/\"\r\n\r\n    // useEffect(()=>{\r\n    //     dispatch(getAllCookingData({start:0,search:inputValue}));\r\n    // },[dispatch,inputValue]);\r\n\r\n    // pagination start\r\n    useEffect(()=>{\r\n      dispatch(getAllCookingData({start:0,length:perPage,search:inputValue}));\r\n      setMypage(1)\r\n    },[dispatch,inputValue,perPage,]);\r\n\r\n     \r\n    const handlePerRowsChange = (newPerPage) => {\r\n      setPerPage(newPerPage);\r\n      // dispatch(getAllCookingData({start:0,length:perPage,search:inputValue}));\r\n    };\r\n    const handlePageChange = page=> {\r\n      setMypage(page)\r\n      console.log(page)\r\n      dispatch(getAllCookingData({start:(page-1)*perPage,length:perPage,search:inputValue}));\r\n    };\r\n    //pagination end\r\n\r\n\r\n    let allCooking_data = useSelector((state)=>{\r\n        return state.cooking\r\n    });\r\n\r\n    let {isLoading,cooking_Data,totalrows}=allCooking_data;\r\n\r\n\r\n    const columns = [\r\n  \r\n      { selector: 'name',name: 'Name',  },\r\n      {\r\n        name: 'Thumbnail',\r\n        cell: row => <img height=\"40px\" className=\"border m-2\" width=\"40px\" alt={row.name} src={`${imagelink}${row.image}`} />,\r\n      },\r\n      // { selector: 'description',name: 'Description', sortable: true},\r\n      // { selector: 'updatedAt', name: 'Updated At', cell:(row)=><span>{moment(row.updatedAt).format(\" Do MMMM, YYYY\")}</span>  },\r\n\r\n     { name: 'Action', button: true,\r\n        cell: (row) => \r\n          <CDropdown className=\"btn-group\">\r\n          <CDropdownToggle className=\"pinkbdr-btn\" size=\"sm\"> Action </CDropdownToggle>\r\n          <CDropdownMenu placement=\"left\">\r\n            <CDropdownItem onClick={() => {setUpdateCookingModalShow(true);setSelectedId(row._id);seImagePath(row.image)}}>Update</CDropdownItem>\r\n            <CDropdownItem onClick={() => {setDeleteModalShow(true);setSelectedId(row._id);seImagePath(row.image)}}>Delete</CDropdownItem>\r\n          </CDropdownMenu>\r\n        </CDropdown>,\r\n            allowOverflow: true,\r\n      },\r\n    ];\r\n\r\n    \r\n  return (\r\n    <>\r\n    <CRow>\r\n      <CCol >\r\n        <CCard>\r\n          <CCardHeader>\r\n                Manage Cooking Method \r\n          </CCardHeader>\r\n          <CCardBody>\r\n            <CRow className=\"justify-content-between align-items-center \">\r\n              <CCol sm=\"4\"  className=\"mb-4\">\r\n                <input className=\"form-control position-relative\"  type=\"text\" value={inputValue} onChange={(e)=>{setInputValue(e.target.value)}} placeholder=\"Search By Name\" />\r\n               {inputValue&&\r\n                <CButton onClick={(e)=>{setInputValue(\"\")}} className=\"position-absolute\" style={{top:0,right:7}}>\r\n                  <CIcon name=\"cil-x\" alt=\"Settings\" className=\"mr-1\"/>\r\n                </CButton>\r\n                }\r\n              </CCol>\r\n              <CCol className=\"mb-4 d-flex justify-content-end\" sm=\"8\">\r\n                <CButton className=\"btn pinkline-btn text-uppercase rounded-pill\" onClick={() => {setAddCookingModalShow(true);setSelectedId(null)}}>\r\n                  <span className=\"add-icon\">\r\n                     Add Cooking Method\r\n                  </span> \r\n                </CButton>\r\n              </CCol>\r\n              <div>\r\n                <AddCookingComponent \r\n                  show={addCookingModalShow} onClose={() => setAddCookingModalShow(false)} \r\n                  imagelink={imagelink} perPage={perPage} \r\n                  myPage={myPage} inputValue={inputValue}\r\n                />\r\n              </div>\r\n            </CRow>\r\n              {\r\n                  isLoading\r\n                  ?\r\n                  <div className=\"text-center\">\r\n                      <div className=\"spinner-border m-3\" role=\"status\"></div>\r\n                        <div className=\"visually-hidden\">Please Wait Loading...</div>\r\n                  </div>\r\n                  :\r\n                  <React.Fragment>\r\n                        {\r\n                            cooking_Data.cooking_methodList && cooking_Data.cooking_methodList.length>0\r\n                            ?\r\n                            <CCard>\r\n                              <DataTable\r\n                                columns={columns}\r\n                                data={cooking_Data.cooking_methodList}\r\n                                highlightOnHover\r\n                                noHeader\r\n                                overflowY\r\n                                striped\r\n                                sortIcon={<CIcon name={\"cil-arrow-top\"} />}\r\n\r\n                                pagination={true}\r\n                                paginationRowsPerPageOptions={[5,10, 15, 20, 25, 30]}\r\n                                paginationPerPage={perPage}\r\n                                paginationServer={true}\r\n                                paginationDefaultPage\t={myPage}\r\n                                paginationTotalRows={totalrows}\r\n                                onChangeRowsPerPage={handlePerRowsChange}\r\n                                onChangePage={handlePageChange}\r\n                              />\r\n                            </CCard>\r\n                            \r\n                            :\r\n                            <div className=\"visually-hidden text-center m-4\">No Data Available</div>\r\n                      }\r\n                  </React.Fragment>\r\n              }\r\n            {/* {JSON.stringify(cooking_Data.cooking_methodList)} */}\r\n            \r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n    <React.Fragment>\r\n        <UpdateCookingComponent \r\n          show={updateCookingModalShow} onClose={() => setUpdateCookingModalShow(false)} \r\n          selectedid={selectedId} imagelink={imagelink} imagepath={imagePath}\r\n          perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n        />\r\n    </React.Fragment>\r\n    <React.Fragment>\r\n      <DeleteCookingComponent \r\n        show={deleteModalShow} onClose={() => setDeleteModalShow(false)} \r\n        selectedid={selectedId} imagepath={imagePath} \r\n        perPage={perPage} myPage={myPage} inputValue={inputValue}\r\n      />\r\n    </React.Fragment>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ManageAllergenPage\r\n\r\n","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\DeleteCookingComponent.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\UpdateCookingComponent.js",["733","734","735","736","737","738","739","740","741","742","743"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CModalFooter,CModalHeader,CModalTitle,CModalBody,CInputGroupAppend,CInputGroupText,CInputGroup} from '@coreui/react';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { CFormGroup,CLabel,CInvalidFeedback,CCardFooter} from '@coreui/react'\r\nimport { getSelectedCookingData, updateSelectedCooking } from \"../../../redux/actions/manageCookingAction\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\n\r\n\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/);\r\n\r\nconst UpdateCookingComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    \r\n    useEffect(()=>{\r\n        if (props.show) {\r\n            dispatch(getSelectedCookingData(props.selectedid));\r\n        }\r\n    },[dispatch,props.show,props.selectedid]);\r\n\r\n    let selectedCookingData = useSelector((state)=>{\r\n        return state.cooking.selectedCooking\r\n    });\r\n\r\n    const initialValues = {\r\n        name:selectedCookingData&&selectedCookingData.name,\r\n        image:selectedCookingData&&selectedCookingData.image,\r\n        // description:selectedCookingData&&selectedCookingData.description,\r\n       \r\n    }\r\n    const validationSchemaForm  = Yup.object().shape({\r\n        name:Yup.string().required('Cooking Name is required'),\r\n        image:Yup.string().required('Cooking Image is required'),\r\n        // description:Yup.string().required('Cooking Description is required'),\r\n    });\r\n\r\n\r\n    \r\n    const onSubmit=(input, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        let obj = {\r\n            name: input.name,\r\n            image:input.image,\r\n            // description:input.description,\r\n        }\r\n        dispatch(updateSelectedCooking(props.selectedid,obj,props.imagepath,props.perPage,props.myPage,props.inputValue));\r\n        props.onClose();\r\n        resetForm();\r\n\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Update Cooking Data \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik \r\n                        enableReinitialize={true} \r\n                        initialValues={initialValues} \r\n                        validationSchema={validationSchemaForm} \r\n                        onSubmit={onSubmit}\r\n                    >\r\n                        {({ errors, touched,values, setSubmitting , isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                    <CFormGroup >\r\n                                            <CLabel >Cooking Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Cooking Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup>  */}\r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Cooking Image</CLabel>\r\n                                            <Field name=\"image\" placeholder=\"Enter here\" className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.image}</CInvalidFeedback>\r\n                                        </CFormGroup> */}\r\n                                        <CFormGroup >\r\n                                            <CLabel >Cooking Image</CLabel>\r\n                                            <UploadComponent setFieldValue={setFieldValue}  className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`}/>\r\n                                            <small className=\"text-danger  mt-1\">{(touched.image && errors.image && errors.image) }</small>\r\n                                            {values.image &&\r\n                                             <div className=\"d-flex justify-content-center align-items-center p-3\">\r\n                                               {typeof values.image === 'string' || values.image instanceof String ?\r\n                                                    <img src={`${props.imagelink}${values.image}`} width=\"160px\" height=\"100px\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                                    :\r\n                                                    <img src={URL.createObjectURL(values.image)} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                            }\r\n                                            </div>\r\n                                              }\r\n                                        </CFormGroup>\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose();}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" >Update</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateCookingComponent;\r\n\r\n\r\n\r\nconst UploadComponent = props => {\r\n    const dispatch=useDispatch();\r\n    const { setFieldValue ,setSubmitting} = props;\r\n\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      accept: \"image/*\",\r\n      onDrop: acceptedFiles => {\r\n          setFieldValue(\"image\", acceptedFiles[0]);\r\n      }\r\n    });\r\n    \r\n\r\n    return (\r\n      <div className=\"border bg-primary\" type=\"button\">\r\n        {}\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          {isDragActive ? (\r\n            <p>Drop the files here ...</p>\r\n          ) : (\r\n            <div className=\"d-flex justify-content-center align-items-center p-2\">\r\n              <img src={'images/upload.svg'}  width=\"30px\" className=\"img-fluid mr-4\" alt=\"showpassword\" />\r\n              <p className=\"text-white m-0\">Click to Upload Image</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\ManageCookingPage\\AddCookingComponent.js",["744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760"],"import React,{useState,useEffect} from \"react\";\r\nimport {CButton,CModal,CFormGroup,CLabel,CRow,CCol,CInvalidFeedback,CCardFooter,\r\n    CModalHeader,CModalTitle,CModalBody ,CInputGroupAppend,CInputGroup,CInputGroupText} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport { Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { addCookingData } from \"../../../redux/actions/manageCookingAction\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst phoneRegex = RegExp( /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\r\nconst passwordRegExp = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,24})/);\r\n\r\nconst AddCookingComponent = (props) => {\r\n    const dispatch=useDispatch();\r\n    const [imageloading,setImageloading]=useState(false);\r\n\r\n    \r\n    const initialValues = {\r\n        name:'',\r\n        image:null,\r\n        // description:'',\r\n       \r\n    }\r\n\r\n    const validationSchema  = Yup.object().shape({\r\n        name:Yup.string().required(' Name is required'),\r\n        image:Yup.mixed().required('Please Upload Image'),\r\n        // description:Yup.string().required('Description is required'),\r\n    });\r\n\r\n    \r\n    const onSubmit=(fields, { setStatus,resetForm})=>{\r\n        setStatus();\r\n        dispatch(addCookingData(fields,props.perPage,props.myPage,props.inputValue));\r\n        props.onClose();\r\n        resetForm();\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <>\r\n            <CModal\r\n                {...props}\r\n                size=\"\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                className=\"mainmodal-wrapper\"\r\n            >\r\n                <CModalHeader className=\"align-items-center\">\r\n                    <CModalTitle className=\"brandon-Medium\" id=\"contained-modal-title-vcenter\">\r\n                        Add  Cooking || \r\n                    </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <Formik enableReinitialize={true} initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} >\r\n                        {({ errors, touched,values,setSubmitting , isSubmitting, setFieldValue,handleChange }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div >\r\n                                        <CFormGroup >\r\n                                            <CLabel >Cooking Name</CLabel>\r\n                                            <Field name=\"name\" placeholder=\"Enter here\" className={`form-control ${touched.name && errors.name?\"is-invalid\": touched.name && !errors.name?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.name}</CInvalidFeedback>\r\n                                        </CFormGroup> \r\n                                        {/* <CFormGroup >\r\n                                            <CLabel >Cooking Description</CLabel>\r\n                                            <Field component=\"textarea\" style={{height:100}} name=\"description\" placeholder=\"Enter here\" className={`form-control ${touched.description && errors.description?\"is-invalid\": touched.description && !errors.description?\"is-valid\":null}`} />\r\n                                            <CInvalidFeedback className=\"help-block\">{errors.description}</CInvalidFeedback>\r\n                                        </CFormGroup>  */}\r\n                                        <CFormGroup >\r\n                                            <CLabel >Cooking Image</CLabel>\r\n                                            <UploadComponent setFieldValue={setFieldValue} setSubmitting={setSubmitting} className={`form-control ${touched.image && errors.image?\"is-invalid\": touched.image && !errors.image?\"is-valid\":null}`}/>\r\n                                            <small className=\"text-danger  mt-1\">{(touched.image && errors.image && errors.image) }</small>\r\n                                            {values.image &&\r\n                                             <div className=\"d-flex justify-content-center align-items-center p-3\">\r\n                                                    <img src={URL.createObjectURL(values.image)} width=\"160px\" height=\"100px\" className=\"border\" alt={values&&values.name?values.name:\"image\"}/>\r\n                                            </div>\r\n                                              }\r\n                                        </CFormGroup> \r\n\r\n                                    </div>\r\n                                    <CCardFooter className=\"d-flex justify-content-end\">\r\n                                        <CButton color=\"secondary\" className=\"mr-4\" type=\"reset\" onClick={()=>{props.onClose()}}>CANCLE</CButton>\r\n                                        <CButton color=\"success\" type=\"submit\" disabled={isSubmitting}>ADD</CButton>\r\n                                    </CCardFooter>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                                    \r\n                     \r\n                    \r\n\r\n                </CModalBody>\r\n              \r\n            </CModal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddCookingComponent;\r\n\r\n\r\nconst UploadComponent = props => {\r\n    const dispatch=useDispatch();\r\n    const { setFieldValue ,setSubmitting} = props;\r\n\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n      accept: \"image/*\",\r\n      onDrop: acceptedFiles => {\r\n          setFieldValue(\"image\", acceptedFiles[0]);\r\n      }\r\n    });\r\n    \r\n\r\n    return (\r\n      <div className=\"border bg-primary\" type=\"button\">\r\n        <div {...getRootProps({ className: \"dropzone\" })}>\r\n          <input {...getInputProps()} />\r\n          {isDragActive ? (\r\n            <p>Drop the files here ...</p>\r\n          ) : (\r\n            <div className=\"d-flex justify-content-center align-items-center p-2\">\r\n              <img src={'images/upload.svg'}  width=\"30px\" className=\"img-fluid mr-4\" alt=\"showpassword\" />\r\n              <p className=\"text-white m-0\">Click to Upload Image</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };","D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\redux\\actions\\manageCookingAction.js",[],"D:\\PickyPigs-SuperAdmin\\pickypigs-super-admin\\src\\views\\pages\\CustomLoadingComp\\CustomLoadingComp.jsx",["761","762"],"import React from \"react\";\r\nimport './CustomLoadingComp.scss';\r\n// import logo_loader from \"../../assets/images/logo-white.svg\"\r\n\r\nconst CustomLoadingComp=(props)=>{\r\n    return(\r\n        <>\r\n        <section className=\"customLoadingComp-container \">\r\n            <div className=\" d-flex flex-column h-100 loader-mainwrapper d-block align-items-center justify-content-center\">\r\n                    <div className=\"loader\">\r\n                        <div className=\"loader-logo ml-auto mr-auto\">\r\n                            {props.path?\r\n                            <img src={`${props.path}images/logo-white.svg`} className=\"img-fluid\" />\r\n                            :\r\n                            <img src={`images/logo-white.svg`} className=\"img-fluid\" />\r\n                            }\r\n                        </div>\r\n                        <div class=\"text-center mt-3\">\r\n                            <p class=\"text-white\">Fuss Free Food</p>\r\n                        </div>\r\n                        <div class=\"loading d-flex\">\r\n                            <div class=\"dot\"></div>\r\n                            <div class=\"dot\"></div>\r\n                            <div class=\"dot\"></div>\r\n                            <div class=\"dot\"></div>\r\n                            <div class=\"dot\"></div>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n        </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomLoadingComp;",{"ruleId":"763","replacedBy":"764"},{"ruleId":"765","replacedBy":"766"},{"ruleId":"767","severity":1,"message":"768","line":1,"column":40,"nodeType":"769","messageId":"770","endLine":1,"endColumn":47},{"ruleId":"767","severity":1,"message":"771","line":1,"column":17,"nodeType":"769","messageId":"770","endLine":1,"endColumn":26},{"ruleId":"767","severity":1,"message":"772","line":2,"column":10,"nodeType":"769","messageId":"770","endLine":2,"endColumn":20},{"ruleId":"767","severity":1,"message":"773","line":5,"column":8,"nodeType":"769","messageId":"770","endLine":5,"endColumn":19},{"ruleId":"767","severity":1,"message":"774","line":19,"column":7,"nodeType":"769","messageId":"770","endLine":19,"endColumn":15},{"ruleId":"767","severity":1,"message":"775","line":3,"column":66,"nodeType":"769","messageId":"770","endLine":3,"endColumn":71},{"ruleId":"767","severity":1,"message":"776","line":3,"column":73,"nodeType":"769","messageId":"770","endLine":3,"endColumn":79},{"ruleId":"767","severity":1,"message":"777","line":58,"column":7,"nodeType":"769","messageId":"770","endLine":58,"endColumn":25},{"ruleId":"767","severity":1,"message":"778","line":22,"column":11,"nodeType":"769","messageId":"770","endLine":22,"endColumn":22},{"ruleId":"767","severity":1,"message":"779","line":3,"column":3,"nodeType":"769","messageId":"770","endLine":3,"endColumn":10},{"ruleId":"767","severity":1,"message":"776","line":6,"column":3,"nodeType":"769","messageId":"770","endLine":6,"endColumn":9},{"ruleId":"767","severity":1,"message":"780","line":7,"column":3,"nodeType":"769","messageId":"770","endLine":7,"endColumn":14},{"ruleId":"767","severity":1,"message":"781","line":8,"column":3,"nodeType":"769","messageId":"770","endLine":8,"endColumn":21},{"ruleId":"767","severity":1,"message":"782","line":9,"column":3,"nodeType":"769","messageId":"770","endLine":9,"endColumn":20},{"ruleId":"767","severity":1,"message":"783","line":10,"column":3,"nodeType":"769","messageId":"770","endLine":10,"endColumn":18},{"ruleId":"767","severity":1,"message":"784","line":13,"column":8,"nodeType":"769","messageId":"770","endLine":13,"endColumn":13},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"786","line":3,"column":9,"nodeType":"769","messageId":"770","endLine":3,"endColumn":15},{"ruleId":"767","severity":1,"message":"787","line":3,"column":49,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"788","line":4,"column":10,"nodeType":"769","messageId":"770","endLine":4,"endColumn":26},{"ruleId":"767","severity":1,"message":"789","line":6,"column":21,"nodeType":"769","messageId":"770","endLine":6,"endColumn":34},{"ruleId":"767","severity":1,"message":"790","line":19,"column":11,"nodeType":"769","messageId":"770","endLine":19,"endColumn":18},{"ruleId":"767","severity":1,"message":"791","line":21,"column":12,"nodeType":"769","messageId":"770","endLine":21,"endColumn":27},{"ruleId":"767","severity":1,"message":"792","line":21,"column":29,"nodeType":"769","messageId":"770","endLine":21,"endColumn":47},{"ruleId":"767","severity":1,"message":"793","line":24,"column":12,"nodeType":"769","messageId":"770","endLine":24,"endColumn":34},{"ruleId":"767","severity":1,"message":"784","line":16,"column":8,"nodeType":"769","messageId":"770","endLine":16,"endColumn":13},{"ruleId":"767","severity":1,"message":"794","line":9,"column":3,"nodeType":"769","messageId":"770","endLine":9,"endColumn":17},{"ruleId":"767","severity":1,"message":"795","line":12,"column":3,"nodeType":"769","messageId":"770","endLine":12,"endColumn":8},{"ruleId":"767","severity":1,"message":"796","line":19,"column":8,"nodeType":"769","messageId":"770","endLine":19,"endColumn":29},{"ruleId":"767","severity":1,"message":"797","line":20,"column":8,"nodeType":"769","messageId":"770","endLine":20,"endColumn":30},{"ruleId":"767","severity":1,"message":"798","line":21,"column":8,"nodeType":"769","messageId":"770","endLine":21,"endColumn":30},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"786","line":3,"column":9,"nodeType":"769","messageId":"770","endLine":3,"endColumn":15},{"ruleId":"767","severity":1,"message":"787","line":3,"column":49,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"789","line":6,"column":21,"nodeType":"769","messageId":"770","endLine":6,"endColumn":34},{"ruleId":"767","severity":1,"message":"790","line":17,"column":11,"nodeType":"769","messageId":"770","endLine":17,"endColumn":18},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"801","line":4,"column":21,"nodeType":"769","messageId":"770","endLine":4,"endColumn":32},{"ruleId":"767","severity":1,"message":"802","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":15},{"ruleId":"767","severity":1,"message":"803","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":12},{"ruleId":"804","severity":1,"message":"805","line":13,"column":75,"nodeType":"806","messageId":"807","endLine":13,"endColumn":76,"suggestions":"808"},{"ruleId":"804","severity":1,"message":"809","line":13,"column":78,"nodeType":"806","messageId":"807","endLine":13,"endColumn":79,"suggestions":"810"},{"ruleId":"804","severity":1,"message":"811","line":13,"column":81,"nodeType":"806","messageId":"807","endLine":13,"endColumn":82,"suggestions":"812"},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"801","line":4,"column":21,"nodeType":"769","messageId":"770","endLine":4,"endColumn":32},{"ruleId":"767","severity":1,"message":"802","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":15},{"ruleId":"767","severity":1,"message":"803","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":12},{"ruleId":"804","severity":1,"message":"805","line":14,"column":75,"nodeType":"806","messageId":"807","endLine":14,"endColumn":76,"suggestions":"813"},{"ruleId":"804","severity":1,"message":"809","line":14,"column":78,"nodeType":"806","messageId":"807","endLine":14,"endColumn":79,"suggestions":"814"},{"ruleId":"804","severity":1,"message":"811","line":14,"column":81,"nodeType":"806","messageId":"807","endLine":14,"endColumn":82,"suggestions":"815"},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"801","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":32},{"ruleId":"767","severity":1,"message":"816","line":8,"column":8,"nodeType":"769","messageId":"770","endLine":8,"endColumn":14},{"ruleId":"804","severity":1,"message":"805","line":15,"column":75,"nodeType":"806","messageId":"807","endLine":15,"endColumn":76,"suggestions":"817"},{"ruleId":"804","severity":1,"message":"809","line":15,"column":78,"nodeType":"806","messageId":"807","endLine":15,"endColumn":79,"suggestions":"818"},{"ruleId":"804","severity":1,"message":"811","line":15,"column":81,"nodeType":"806","messageId":"807","endLine":15,"endColumn":82,"suggestions":"819"},{"ruleId":"767","severity":1,"message":"786","line":3,"column":3,"nodeType":"769","messageId":"770","endLine":3,"endColumn":9},{"ruleId":"767","severity":1,"message":"820","line":1,"column":8,"nodeType":"769","messageId":"770","endLine":1,"endColumn":13},{"ruleId":"767","severity":1,"message":"821","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"822","line":1,"column":25,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"786","line":3,"column":9,"nodeType":"769","messageId":"770","endLine":3,"endColumn":15},{"ruleId":"767","severity":1,"message":"787","line":3,"column":49,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"789","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":34},{"ruleId":"767","severity":1,"message":"816","line":7,"column":8,"nodeType":"769","messageId":"770","endLine":7,"endColumn":14},{"ruleId":"767","severity":1,"message":"790","line":28,"column":11,"nodeType":"769","messageId":"770","endLine":28,"endColumn":18},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"823","line":2,"column":42,"nodeType":"769","messageId":"770","endLine":2,"endColumn":46},{"ruleId":"767","severity":1,"message":"824","line":2,"column":47,"nodeType":"769","messageId":"770","endLine":2,"endColumn":51},{"ruleId":"767","severity":1,"message":"782","line":3,"column":42,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"780","line":3,"column":60,"nodeType":"769","messageId":"770","endLine":3,"endColumn":71},{"ruleId":"767","severity":1,"message":"783","line":3,"column":72,"nodeType":"769","messageId":"770","endLine":3,"endColumn":87},{"ruleId":"767","severity":1,"message":"784","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":13},{"ruleId":"767","severity":1,"message":"801","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":32},{"ruleId":"767","severity":1,"message":"825","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":17},{"ruleId":"767","severity":1,"message":"826","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":12,"column":75,"nodeType":"806","messageId":"807","endLine":12,"endColumn":76,"suggestions":"827"},{"ruleId":"804","severity":1,"message":"809","line":12,"column":78,"nodeType":"806","messageId":"807","endLine":12,"endColumn":79,"suggestions":"828"},{"ruleId":"804","severity":1,"message":"811","line":12,"column":81,"nodeType":"806","messageId":"807","endLine":12,"endColumn":82,"suggestions":"829"},{"ruleId":"767","severity":1,"message":"830","line":16,"column":12,"nodeType":"769","messageId":"770","endLine":16,"endColumn":24},{"ruleId":"767","severity":1,"message":"831","line":16,"column":25,"nodeType":"769","messageId":"770","endLine":16,"endColumn":40},{"ruleId":"767","severity":1,"message":"832","line":106,"column":11,"nodeType":"769","messageId":"770","endLine":106,"endColumn":19},{"ruleId":"767","severity":1,"message":"833","line":107,"column":28,"nodeType":"769","messageId":"770","endLine":107,"endColumn":41},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"782","line":2,"column":73,"nodeType":"769","messageId":"770","endLine":2,"endColumn":90},{"ruleId":"767","severity":1,"message":"783","line":2,"column":91,"nodeType":"769","messageId":"770","endLine":2,"endColumn":106},{"ruleId":"767","severity":1,"message":"780","line":2,"column":107,"nodeType":"769","messageId":"770","endLine":2,"endColumn":118},{"ruleId":"767","severity":1,"message":"826","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":12,"column":75,"nodeType":"806","messageId":"807","endLine":12,"endColumn":76,"suggestions":"834"},{"ruleId":"804","severity":1,"message":"809","line":12,"column":78,"nodeType":"806","messageId":"807","endLine":12,"endColumn":79,"suggestions":"835"},{"ruleId":"804","severity":1,"message":"811","line":12,"column":81,"nodeType":"806","messageId":"807","endLine":12,"endColumn":82,"suggestions":"836"},{"ruleId":"767","severity":1,"message":"832","line":135,"column":11,"nodeType":"769","messageId":"770","endLine":135,"endColumn":19},{"ruleId":"767","severity":1,"message":"833","line":136,"column":28,"nodeType":"769","messageId":"770","endLine":136,"endColumn":41},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"790","line":16,"column":11,"nodeType":"769","messageId":"770","endLine":16,"endColumn":18},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"801","line":4,"column":21,"nodeType":"769","messageId":"770","endLine":4,"endColumn":32},{"ruleId":"767","severity":1,"message":"825","line":9,"column":7,"nodeType":"769","messageId":"770","endLine":9,"endColumn":17},{"ruleId":"767","severity":1,"message":"826","line":10,"column":7,"nodeType":"769","messageId":"770","endLine":10,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":10,"column":75,"nodeType":"806","messageId":"807","endLine":10,"endColumn":76,"suggestions":"837"},{"ruleId":"804","severity":1,"message":"809","line":10,"column":78,"nodeType":"806","messageId":"807","endLine":10,"endColumn":79,"suggestions":"838"},{"ruleId":"804","severity":1,"message":"811","line":10,"column":81,"nodeType":"806","messageId":"807","endLine":10,"endColumn":82,"suggestions":"839"},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"782","line":2,"column":73,"nodeType":"769","messageId":"770","endLine":2,"endColumn":90},{"ruleId":"767","severity":1,"message":"783","line":2,"column":91,"nodeType":"769","messageId":"770","endLine":2,"endColumn":106},{"ruleId":"767","severity":1,"message":"780","line":2,"column":107,"nodeType":"769","messageId":"770","endLine":2,"endColumn":118},{"ruleId":"767","severity":1,"message":"802","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":15},{"ruleId":"767","severity":1,"message":"803","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":12},{"ruleId":"767","severity":1,"message":"826","line":14,"column":7,"nodeType":"769","messageId":"770","endLine":14,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":14,"column":75,"nodeType":"806","messageId":"807","endLine":14,"endColumn":76,"suggestions":"840"},{"ruleId":"804","severity":1,"message":"809","line":14,"column":78,"nodeType":"806","messageId":"807","endLine":14,"endColumn":79,"suggestions":"841"},{"ruleId":"804","severity":1,"message":"811","line":14,"column":81,"nodeType":"806","messageId":"807","endLine":14,"endColumn":82,"suggestions":"842"},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"816","line":11,"column":8,"nodeType":"769","messageId":"770","endLine":11,"endColumn":14},{"ruleId":"767","severity":1,"message":"790","line":16,"column":11,"nodeType":"769","messageId":"770","endLine":16,"endColumn":18},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"782","line":2,"column":73,"nodeType":"769","messageId":"770","endLine":2,"endColumn":90},{"ruleId":"767","severity":1,"message":"783","line":2,"column":91,"nodeType":"769","messageId":"770","endLine":2,"endColumn":106},{"ruleId":"767","severity":1,"message":"780","line":2,"column":107,"nodeType":"769","messageId":"770","endLine":2,"endColumn":118},{"ruleId":"767","severity":1,"message":"802","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":15},{"ruleId":"767","severity":1,"message":"803","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":12},{"ruleId":"767","severity":1,"message":"826","line":14,"column":7,"nodeType":"769","messageId":"770","endLine":14,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":14,"column":75,"nodeType":"806","messageId":"807","endLine":14,"endColumn":76,"suggestions":"843"},{"ruleId":"804","severity":1,"message":"809","line":14,"column":78,"nodeType":"806","messageId":"807","endLine":14,"endColumn":79,"suggestions":"844"},{"ruleId":"804","severity":1,"message":"811","line":14,"column":81,"nodeType":"806","messageId":"807","endLine":14,"endColumn":82,"suggestions":"845"},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"801","line":4,"column":21,"nodeType":"769","messageId":"770","endLine":4,"endColumn":32},{"ruleId":"767","severity":1,"message":"825","line":9,"column":7,"nodeType":"769","messageId":"770","endLine":9,"endColumn":17},{"ruleId":"767","severity":1,"message":"826","line":10,"column":7,"nodeType":"769","messageId":"770","endLine":10,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":10,"column":75,"nodeType":"806","messageId":"807","endLine":10,"endColumn":76,"suggestions":"846"},{"ruleId":"804","severity":1,"message":"809","line":10,"column":78,"nodeType":"806","messageId":"807","endLine":10,"endColumn":79,"suggestions":"847"},{"ruleId":"804","severity":1,"message":"811","line":10,"column":81,"nodeType":"806","messageId":"807","endLine":10,"endColumn":82,"suggestions":"848"},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"816","line":11,"column":8,"nodeType":"769","messageId":"770","endLine":11,"endColumn":14},{"ruleId":"767","severity":1,"message":"790","line":16,"column":11,"nodeType":"769","messageId":"770","endLine":16,"endColumn":18},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"801","line":4,"column":21,"nodeType":"769","messageId":"770","endLine":4,"endColumn":32},{"ruleId":"767","severity":1,"message":"825","line":9,"column":7,"nodeType":"769","messageId":"770","endLine":9,"endColumn":17},{"ruleId":"767","severity":1,"message":"826","line":10,"column":7,"nodeType":"769","messageId":"770","endLine":10,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":10,"column":75,"nodeType":"806","messageId":"807","endLine":10,"endColumn":76,"suggestions":"849"},{"ruleId":"804","severity":1,"message":"809","line":10,"column":78,"nodeType":"806","messageId":"807","endLine":10,"endColumn":79,"suggestions":"850"},{"ruleId":"804","severity":1,"message":"811","line":10,"column":81,"nodeType":"806","messageId":"807","endLine":10,"endColumn":82,"suggestions":"851"},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"782","line":2,"column":73,"nodeType":"769","messageId":"770","endLine":2,"endColumn":90},{"ruleId":"767","severity":1,"message":"783","line":2,"column":91,"nodeType":"769","messageId":"770","endLine":2,"endColumn":106},{"ruleId":"767","severity":1,"message":"780","line":2,"column":107,"nodeType":"769","messageId":"770","endLine":2,"endColumn":118},{"ruleId":"767","severity":1,"message":"802","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":15},{"ruleId":"767","severity":1,"message":"803","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":12},{"ruleId":"767","severity":1,"message":"826","line":14,"column":7,"nodeType":"769","messageId":"770","endLine":14,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":14,"column":75,"nodeType":"806","messageId":"807","endLine":14,"endColumn":76,"suggestions":"852"},{"ruleId":"804","severity":1,"message":"809","line":14,"column":78,"nodeType":"806","messageId":"807","endLine":14,"endColumn":79,"suggestions":"853"},{"ruleId":"804","severity":1,"message":"811","line":14,"column":81,"nodeType":"806","messageId":"807","endLine":14,"endColumn":82,"suggestions":"854"},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"786","line":3,"column":9,"nodeType":"769","messageId":"770","endLine":3,"endColumn":15},{"ruleId":"767","severity":1,"message":"787","line":3,"column":49,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"789","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":34},{"ruleId":"767","severity":1,"message":"816","line":7,"column":8,"nodeType":"769","messageId":"770","endLine":7,"endColumn":14},{"ruleId":"767","severity":1,"message":"790","line":27,"column":11,"nodeType":"769","messageId":"770","endLine":27,"endColumn":18},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"823","line":2,"column":42,"nodeType":"769","messageId":"770","endLine":2,"endColumn":46},{"ruleId":"767","severity":1,"message":"824","line":2,"column":47,"nodeType":"769","messageId":"770","endLine":2,"endColumn":51},{"ruleId":"767","severity":1,"message":"782","line":3,"column":42,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"780","line":3,"column":60,"nodeType":"769","messageId":"770","endLine":3,"endColumn":71},{"ruleId":"767","severity":1,"message":"783","line":3,"column":72,"nodeType":"769","messageId":"770","endLine":3,"endColumn":87},{"ruleId":"767","severity":1,"message":"784","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":13},{"ruleId":"767","severity":1,"message":"801","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":32},{"ruleId":"767","severity":1,"message":"825","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":17},{"ruleId":"767","severity":1,"message":"826","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":12,"column":75,"nodeType":"806","messageId":"807","endLine":12,"endColumn":76,"suggestions":"855"},{"ruleId":"804","severity":1,"message":"809","line":12,"column":78,"nodeType":"806","messageId":"807","endLine":12,"endColumn":79,"suggestions":"856"},{"ruleId":"804","severity":1,"message":"811","line":12,"column":81,"nodeType":"806","messageId":"807","endLine":12,"endColumn":82,"suggestions":"857"},{"ruleId":"767","severity":1,"message":"830","line":16,"column":12,"nodeType":"769","messageId":"770","endLine":16,"endColumn":24},{"ruleId":"767","severity":1,"message":"831","line":16,"column":25,"nodeType":"769","messageId":"770","endLine":16,"endColumn":40},{"ruleId":"767","severity":1,"message":"832","line":108,"column":11,"nodeType":"769","messageId":"770","endLine":108,"endColumn":19},{"ruleId":"767","severity":1,"message":"833","line":109,"column":28,"nodeType":"769","messageId":"770","endLine":109,"endColumn":41},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"782","line":2,"column":73,"nodeType":"769","messageId":"770","endLine":2,"endColumn":90},{"ruleId":"767","severity":1,"message":"783","line":2,"column":91,"nodeType":"769","messageId":"770","endLine":2,"endColumn":106},{"ruleId":"767","severity":1,"message":"780","line":2,"column":107,"nodeType":"769","messageId":"770","endLine":2,"endColumn":118},{"ruleId":"767","severity":1,"message":"826","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":12,"column":75,"nodeType":"806","messageId":"807","endLine":12,"endColumn":76,"suggestions":"858"},{"ruleId":"804","severity":1,"message":"809","line":12,"column":78,"nodeType":"806","messageId":"807","endLine":12,"endColumn":79,"suggestions":"859"},{"ruleId":"804","severity":1,"message":"811","line":12,"column":81,"nodeType":"806","messageId":"807","endLine":12,"endColumn":82,"suggestions":"860"},{"ruleId":"767","severity":1,"message":"832","line":135,"column":11,"nodeType":"769","messageId":"770","endLine":135,"endColumn":19},{"ruleId":"767","severity":1,"message":"833","line":136,"column":28,"nodeType":"769","messageId":"770","endLine":136,"endColumn":41},{"ruleId":"767","severity":1,"message":"785","line":2,"column":22,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"786","line":3,"column":9,"nodeType":"769","messageId":"770","endLine":3,"endColumn":15},{"ruleId":"767","severity":1,"message":"787","line":3,"column":49,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"789","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":34},{"ruleId":"767","severity":1,"message":"816","line":7,"column":8,"nodeType":"769","messageId":"770","endLine":7,"endColumn":14},{"ruleId":"767","severity":1,"message":"790","line":16,"column":11,"nodeType":"769","messageId":"770","endLine":16,"endColumn":18},{"ruleId":"767","severity":1,"message":"822","line":1,"column":15,"nodeType":"769","messageId":"770","endLine":1,"endColumn":23},{"ruleId":"767","severity":1,"message":"800","line":2,"column":24,"nodeType":"769","messageId":"770","endLine":2,"endColumn":36},{"ruleId":"767","severity":1,"message":"782","line":2,"column":73,"nodeType":"769","messageId":"770","endLine":2,"endColumn":90},{"ruleId":"767","severity":1,"message":"783","line":2,"column":91,"nodeType":"769","messageId":"770","endLine":2,"endColumn":106},{"ruleId":"767","severity":1,"message":"780","line":2,"column":107,"nodeType":"769","messageId":"770","endLine":2,"endColumn":118},{"ruleId":"767","severity":1,"message":"826","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":12,"column":75,"nodeType":"806","messageId":"807","endLine":12,"endColumn":76,"suggestions":"861"},{"ruleId":"804","severity":1,"message":"809","line":12,"column":78,"nodeType":"806","messageId":"807","endLine":12,"endColumn":79,"suggestions":"862"},{"ruleId":"804","severity":1,"message":"811","line":12,"column":81,"nodeType":"806","messageId":"807","endLine":12,"endColumn":82,"suggestions":"863"},{"ruleId":"767","severity":1,"message":"832","line":135,"column":11,"nodeType":"769","messageId":"770","endLine":135,"endColumn":19},{"ruleId":"767","severity":1,"message":"833","line":136,"column":28,"nodeType":"769","messageId":"770","endLine":136,"endColumn":41},{"ruleId":"767","severity":1,"message":"799","line":1,"column":24,"nodeType":"769","messageId":"770","endLine":1,"endColumn":33},{"ruleId":"767","severity":1,"message":"823","line":2,"column":42,"nodeType":"769","messageId":"770","endLine":2,"endColumn":46},{"ruleId":"767","severity":1,"message":"824","line":2,"column":47,"nodeType":"769","messageId":"770","endLine":2,"endColumn":51},{"ruleId":"767","severity":1,"message":"782","line":3,"column":42,"nodeType":"769","messageId":"770","endLine":3,"endColumn":59},{"ruleId":"767","severity":1,"message":"780","line":3,"column":60,"nodeType":"769","messageId":"770","endLine":3,"endColumn":71},{"ruleId":"767","severity":1,"message":"783","line":3,"column":72,"nodeType":"769","messageId":"770","endLine":3,"endColumn":87},{"ruleId":"767","severity":1,"message":"784","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":13},{"ruleId":"767","severity":1,"message":"801","line":5,"column":21,"nodeType":"769","messageId":"770","endLine":5,"endColumn":32},{"ruleId":"767","severity":1,"message":"825","line":11,"column":7,"nodeType":"769","messageId":"770","endLine":11,"endColumn":17},{"ruleId":"767","severity":1,"message":"826","line":12,"column":7,"nodeType":"769","messageId":"770","endLine":12,"endColumn":21},{"ruleId":"804","severity":1,"message":"805","line":12,"column":75,"nodeType":"806","messageId":"807","endLine":12,"endColumn":76,"suggestions":"864"},{"ruleId":"804","severity":1,"message":"809","line":12,"column":78,"nodeType":"806","messageId":"807","endLine":12,"endColumn":79,"suggestions":"865"},{"ruleId":"804","severity":1,"message":"811","line":12,"column":81,"nodeType":"806","messageId":"807","endLine":12,"endColumn":82,"suggestions":"866"},{"ruleId":"767","severity":1,"message":"830","line":16,"column":12,"nodeType":"769","messageId":"770","endLine":16,"endColumn":24},{"ruleId":"767","severity":1,"message":"831","line":16,"column":25,"nodeType":"769","messageId":"770","endLine":16,"endColumn":40},{"ruleId":"767","severity":1,"message":"832","line":108,"column":11,"nodeType":"769","messageId":"770","endLine":108,"endColumn":19},{"ruleId":"767","severity":1,"message":"833","line":109,"column":28,"nodeType":"769","messageId":"770","endLine":109,"endColumn":41},{"ruleId":"867","severity":1,"message":"868","line":13,"column":29,"nodeType":"869","endLine":13,"endColumn":101},{"ruleId":"867","severity":1,"message":"868","line":15,"column":29,"nodeType":"869","endLine":15,"endColumn":88},"no-native-reassign",["870"],"no-negated-in-lhs",["871"],"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'HashRouter' is defined but never used.","'PublicRoute' is defined but never used.","'Register' is assigned a value but never used.","'CForm' is defined but never used.","'CInput' is defined but never used.","'forgotPasswordData' is assigned a value but never used.","'phoneRegExp' is assigned a value but never used.","'CButton' is defined but never used.","'CInputGroup' is defined but never used.","'CInputGroupPrepend' is defined but never used.","'CInputGroupAppend' is defined but never used.","'CInputGroupText' is defined but never used.","'CIcon' is defined but never used.","'useLocation' is defined but never used.","'CBadge' is defined but never used.","'CDataTable' is defined but never used.","'downloadUserData' is defined but never used.","'defaultThemes' is defined but never used.","'history' is assigned a value but never used.","'deleteModalShow' is assigned a value but never used.","'setDeleteModalShow' is assigned a value but never used.","'addRestaurantModalShow' is assigned a value but never used.","'CHeaderNavLink' is defined but never used.","'CLink' is defined but never used.","'TheHeaderDropdownMssg' is defined but never used.","'TheHeaderDropdownNotif' is defined but never used.","'TheHeaderDropdownTasks' is defined but never used.","'useEffect' is defined but never used.","'CModalFooter' is defined but never used.","'useSelector' is defined but never used.","'packages' is assigned a value but never used.","'roles' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\$.","Literal","unnecessaryEscape",["872","873"],"Unnecessary escape character: \\^.",["874","875"],"Unnecessary escape character: \\*.",["876","877"],["878","879"],["880","881"],["882","883"],"'moment' is defined but never used.",["884","885"],["886","887"],["888","889"],"'Axios' is defined but never used.","'setState' is defined but never used.","'useState' is defined but never used.","'CRow' is defined but never used.","'CCol' is defined but never used.","'phoneRegex' is assigned a value but never used.","'passwordRegExp' is assigned a value but never used.",["890","891"],["892","893"],["894","895"],"'imageloading' is assigned a value but never used.","'setImageloading' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.",["896","897"],["898","899"],["900","901"],["902","903"],["904","905"],["906","907"],["908","909"],["910","911"],["912","913"],["914","915"],["916","917"],["918","919"],["920","921"],["922","923"],["924","925"],["926","927"],["928","929"],["930","931"],["932","933"],["934","935"],["936","937"],["938","939"],["940","941"],["942","943"],["944","945"],["946","947"],["948","949"],["950","951"],["952","953"],["954","955"],["956","957"],["958","959"],["960","961"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"messageId":"962","fix":"963","desc":"964"},{"messageId":"965","fix":"966","desc":"967"},{"messageId":"962","fix":"968","desc":"964"},{"messageId":"965","fix":"969","desc":"967"},{"messageId":"962","fix":"970","desc":"964"},{"messageId":"965","fix":"971","desc":"967"},{"messageId":"962","fix":"972","desc":"964"},{"messageId":"965","fix":"973","desc":"967"},{"messageId":"962","fix":"974","desc":"964"},{"messageId":"965","fix":"975","desc":"967"},{"messageId":"962","fix":"976","desc":"964"},{"messageId":"965","fix":"977","desc":"967"},{"messageId":"962","fix":"978","desc":"964"},{"messageId":"965","fix":"979","desc":"967"},{"messageId":"962","fix":"980","desc":"964"},{"messageId":"965","fix":"981","desc":"967"},{"messageId":"962","fix":"982","desc":"964"},{"messageId":"965","fix":"983","desc":"967"},{"messageId":"962","fix":"984","desc":"964"},{"messageId":"965","fix":"985","desc":"967"},{"messageId":"962","fix":"986","desc":"964"},{"messageId":"965","fix":"987","desc":"967"},{"messageId":"962","fix":"988","desc":"964"},{"messageId":"965","fix":"989","desc":"967"},{"messageId":"962","fix":"990","desc":"964"},{"messageId":"965","fix":"991","desc":"967"},{"messageId":"962","fix":"992","desc":"964"},{"messageId":"965","fix":"993","desc":"967"},{"messageId":"962","fix":"994","desc":"964"},{"messageId":"965","fix":"995","desc":"967"},{"messageId":"962","fix":"996","desc":"964"},{"messageId":"965","fix":"997","desc":"967"},{"messageId":"962","fix":"998","desc":"964"},{"messageId":"965","fix":"999","desc":"967"},{"messageId":"962","fix":"1000","desc":"964"},{"messageId":"965","fix":"1001","desc":"967"},{"messageId":"962","fix":"1002","desc":"964"},{"messageId":"965","fix":"1003","desc":"967"},{"messageId":"962","fix":"1004","desc":"964"},{"messageId":"965","fix":"1005","desc":"967"},{"messageId":"962","fix":"1006","desc":"964"},{"messageId":"965","fix":"1007","desc":"967"},{"messageId":"962","fix":"1008","desc":"964"},{"messageId":"965","fix":"1009","desc":"967"},{"messageId":"962","fix":"1010","desc":"964"},{"messageId":"965","fix":"1011","desc":"967"},{"messageId":"962","fix":"1012","desc":"964"},{"messageId":"965","fix":"1013","desc":"967"},{"messageId":"962","fix":"1014","desc":"964"},{"messageId":"965","fix":"1015","desc":"967"},{"messageId":"962","fix":"1016","desc":"964"},{"messageId":"965","fix":"1017","desc":"967"},{"messageId":"962","fix":"1018","desc":"964"},{"messageId":"965","fix":"1019","desc":"967"},{"messageId":"962","fix":"1020","desc":"964"},{"messageId":"965","fix":"1021","desc":"967"},{"messageId":"962","fix":"1022","desc":"964"},{"messageId":"965","fix":"1023","desc":"967"},{"messageId":"962","fix":"1024","desc":"964"},{"messageId":"965","fix":"1025","desc":"967"},{"messageId":"962","fix":"1026","desc":"964"},{"messageId":"965","fix":"1027","desc":"967"},{"messageId":"962","fix":"1028","desc":"964"},{"messageId":"965","fix":"1029","desc":"967"},{"messageId":"962","fix":"1030","desc":"964"},{"messageId":"965","fix":"1031","desc":"967"},{"messageId":"962","fix":"1032","desc":"964"},{"messageId":"965","fix":"1033","desc":"967"},{"messageId":"962","fix":"1034","desc":"964"},{"messageId":"965","fix":"1035","desc":"967"},{"messageId":"962","fix":"1036","desc":"964"},{"messageId":"965","fix":"1037","desc":"967"},{"messageId":"962","fix":"1038","desc":"964"},{"messageId":"965","fix":"1039","desc":"967"},{"messageId":"962","fix":"1040","desc":"964"},{"messageId":"965","fix":"1041","desc":"967"},{"messageId":"962","fix":"1042","desc":"964"},{"messageId":"965","fix":"1043","desc":"967"},{"messageId":"962","fix":"1044","desc":"964"},{"messageId":"965","fix":"1045","desc":"967"},{"messageId":"962","fix":"1046","desc":"964"},{"messageId":"965","fix":"1047","desc":"967"},{"messageId":"962","fix":"1048","desc":"964"},{"messageId":"965","fix":"1049","desc":"967"},{"messageId":"962","fix":"1050","desc":"964"},{"messageId":"965","fix":"1051","desc":"967"},{"messageId":"962","fix":"1052","desc":"964"},{"messageId":"965","fix":"1053","desc":"967"},{"messageId":"962","fix":"1054","desc":"964"},{"messageId":"965","fix":"1055","desc":"967"},"removeEscape",{"range":"1056","text":"1057"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1058","text":"1059"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1060","text":"1057"},{"range":"1061","text":"1059"},{"range":"1062","text":"1057"},{"range":"1063","text":"1059"},{"range":"1064","text":"1057"},{"range":"1065","text":"1059"},{"range":"1066","text":"1057"},{"range":"1067","text":"1059"},{"range":"1068","text":"1057"},{"range":"1069","text":"1059"},{"range":"1070","text":"1057"},{"range":"1071","text":"1059"},{"range":"1072","text":"1057"},{"range":"1073","text":"1059"},{"range":"1074","text":"1057"},{"range":"1075","text":"1059"},{"range":"1076","text":"1057"},{"range":"1077","text":"1059"},{"range":"1078","text":"1057"},{"range":"1079","text":"1059"},{"range":"1080","text":"1057"},{"range":"1081","text":"1059"},{"range":"1082","text":"1057"},{"range":"1083","text":"1059"},{"range":"1084","text":"1057"},{"range":"1085","text":"1059"},{"range":"1086","text":"1057"},{"range":"1087","text":"1059"},{"range":"1088","text":"1057"},{"range":"1089","text":"1059"},{"range":"1090","text":"1057"},{"range":"1091","text":"1059"},{"range":"1092","text":"1057"},{"range":"1093","text":"1059"},{"range":"1094","text":"1057"},{"range":"1095","text":"1059"},{"range":"1096","text":"1057"},{"range":"1097","text":"1059"},{"range":"1098","text":"1057"},{"range":"1099","text":"1059"},{"range":"1100","text":"1057"},{"range":"1101","text":"1059"},{"range":"1102","text":"1057"},{"range":"1103","text":"1059"},{"range":"1104","text":"1057"},{"range":"1105","text":"1059"},{"range":"1106","text":"1057"},{"range":"1107","text":"1059"},{"range":"1108","text":"1057"},{"range":"1109","text":"1059"},{"range":"1110","text":"1057"},{"range":"1111","text":"1059"},{"range":"1112","text":"1057"},{"range":"1113","text":"1059"},{"range":"1114","text":"1057"},{"range":"1115","text":"1059"},{"range":"1116","text":"1057"},{"range":"1117","text":"1059"},{"range":"1118","text":"1057"},{"range":"1119","text":"1059"},{"range":"1120","text":"1057"},{"range":"1121","text":"1059"},{"range":"1122","text":"1057"},{"range":"1123","text":"1059"},{"range":"1124","text":"1057"},{"range":"1125","text":"1059"},{"range":"1126","text":"1057"},{"range":"1127","text":"1059"},{"range":"1128","text":"1057"},{"range":"1129","text":"1059"},{"range":"1130","text":"1057"},{"range":"1131","text":"1059"},{"range":"1132","text":"1057"},{"range":"1133","text":"1059"},{"range":"1134","text":"1057"},{"range":"1135","text":"1059"},{"range":"1136","text":"1057"},{"range":"1137","text":"1059"},{"range":"1138","text":"1057"},{"range":"1139","text":"1059"},{"range":"1140","text":"1057"},{"range":"1141","text":"1059"},{"range":"1142","text":"1057"},{"range":"1143","text":"1059"},{"range":"1144","text":"1057"},{"range":"1145","text":"1059"},{"range":"1146","text":"1057"},{"range":"1147","text":"1059"},[726,727],"",[726,726],"\\",[729,730],[729,729],[732,733],[732,732],[737,738],[737,737],[740,741],[740,740],[743,744],[743,743],[803,804],[803,803],[806,807],[806,806],[809,810],[809,809],[696,697],[696,696],[699,700],[699,699],[702,703],[702,702],[636,637],[636,636],[639,640],[639,639],[642,643],[642,642],[551,552],[551,551],[554,555],[554,554],[557,558],[557,557],[675,676],[675,675],[678,679],[678,678],[681,682],[681,681],[681,682],[681,681],[684,685],[684,684],[687,688],[687,687],[555,556],[555,555],[558,559],[558,558],[561,562],[561,561],[551,552],[551,551],[554,555],[554,554],[557,558],[557,557],[675,676],[675,675],[678,679],[678,678],[681,682],[681,681],[698,699],[698,698],[701,702],[701,701],[704,705],[704,704],[639,640],[639,639],[642,643],[642,642],[645,646],[645,645],[636,637],[636,636],[639,640],[639,639],[642,643],[642,642],[696,697],[696,696],[699,700],[699,699],[702,703],[702,702]]